openapi: 3.0.0
info:
  title: Robotdrop - OpenAPI 3.0
  description: 
    "<h2>Welcome to the API Documentation of Robotdrop. </h2><br> Majority of the routes need JWT, make sure you have proper authentification before using a route. Set them by clicking the AUTHORIZE button given below. Expiry time for JWT is 100 minutes. It can't be changed in .env file."
    
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Locally deployed server
tags:
  - name: Stripe
  - name: Super-Admin
  - name: User
  - name: NFTs
    description: Routes related to performing operations on NFTs.
  - name: Batch Mint
    description: Routes related to performing Batch minting.
  - name: Drop & Marketplace
    description: Routes related to drops and marketplace.
  - name: Auction
    description: Routes realted to auction.
  - name: LazyMint
  - name: Blockchain Transactions
    description: Routes related to accessing and storing on-chain transaction.
  - name: Wallet Analytics
    description: Routes related to analyzing and monitoring wallet.
  - name: Top Up
    description: Routes related to analyzing and monitoring wallet.
  - name: Marketplaces
paths:
  /stripe/account/status:
    get:
      tags:
      - Stripe
      summary: get stripe account creation and onboarding status
    
      responses: 
        200: 
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "isAccountCreated": true,
                  "detailsSubmitted": false
                }
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /stripe/account/onboarding-link:
    get:
      tags:
      - Stripe
      summary: get stripe account onboarding link
    
      responses: 
        200: 
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "detailsSubmitted": true,
                  "onboardingLink": {
                      "object": "account_link",
                      "created": 1687694607,
                      "expires_at": 1687694907,
                      "url": "https://connect.stripe.com/setup/e/acct_1NMpzHR8jmxjfQJ8/i6ZbWhXlD8SC"
                  }
              }
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /stripe/account/login:
    get:
      tags:
      - Stripe
      summary: get stripe account login link
    
      responses: 
        200: 
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "link": "https://connect.stripe.com/express/acct_1NMpzHR8jmxjfQJ8/oyeQxBFBzxOx"
              }
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /super-admin/platform-fee:
    get:
      tags: 
        - Super-Admin
      summary: Returns platform fee percentage

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "platformFee": 5
              }
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []

  /super-admin/balance:
    get:
      tags: 
        - Super-Admin
      summary: Returns Fiat and Matic balance of Super admin

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "superAdmin": {
                      "usd": 123,
                      "matic": {
                        "inMatic": "12",
                        "inWei": "12000000000000000000",
                      },
                    },
                    "masterWallet": {
                      "usd": 123,
                      "matic": {
                        "inMatic": "12",
                        "inWei": "12000000000000000000",
                      },
                    }
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []
  /super-admin/admins/unverified:
    get:
      tags: 
        - Super-Admin
      summary: Returns all unverified admins
      parameters:
        - name: userType
          required: true
          in: query
          description: Provide the user type either v1 or v2.
          schema:
            type: string
            example: v1

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "unverifiedAdmins": [{
                      "_id":"6399ea8056d71c613fc75f39",
                      "username":"Sumair Admin",
                      "email":"admin@gamil.com",
                      "password":
                      "$2b$12$GPG4rmuYkaLFJqac2PRz2evZtd8ofqL5ekoea4Nwo3aRxQlsLni9K",
                      "role":"admin",
                      "isVerified":false,
                      "isEnabled": false
                    }],
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []

  /super-admin/admins/unverified/{start}/{end}:
    get:
      tags: 
        - Super-Admin
      summary: Returns all unverified admins
      parameters:
        - name: start
          required: true
          in: path
          description: Provide starting index to get start getting data from.
          schema:
            type: string
            example: 0
        - name: end
          required: true
          in: path
          description: Provide ending index till which to get data.
          schema:
            type: string
            example: 1
        - name: userType
          required: true
          in: query
          description: Provide the user type either v1 or v2.
          schema:
            type: string
            example: v1
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "unverifiedAdmins": [{
                      "_id":"6399ea8056d71c613fc75f39",
                      "username":"Sumair Admin",
                      "email":"admin@gamil.com",
                      "password":
                      "$2b$12$GPG4rmuYkaLFJqac2PRz2evZtd8ofqL5ekoea4Nwo3aRxQlsLni9K",
                      "role":"admin",
                      "isVerified":false,
                      "isEnabled": false
                    }],
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []
  /super-admin/admins/verified:
    get:
      tags: 
        - Super-Admin
      summary: Returns all verified admins
      parameters:
        - name: userType
          required: true
          in: query
          description: Provide the user type either v1 or v2.
          schema:
            type: string
            example: v1

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "verifiedAdmins": [{
                      "_id":"6399ea8056d71c613fc75f39",
                      "username":"Sumair Admin",
                      "email":"admin@gamil.com",
                      "password":
                      "$2b$12$GPG4rmuYkaLFJqac2PRz2evZtd8ofqL5ekoea4Nwo3aRxQlsLni9K",
                      "role":"admin",
                      "isVerified":true,
                      "isEnabled": true
                    }],
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'

      security:
      - superAdminBearerAuth: []

  /super-admin/admins/verified/{start}/{end}:
    get:
      tags: 
        - Super-Admin
      summary: Returns all verified admins
      parameters:
        - name: start
          required: true
          in: path
          description: Provide starting index to get start getting data from.
          schema:
            type: string
            example: 0
        - name: end
          required: true
          in: path
          description: Provide ending index till which to get data.
          schema:
            type: string
            example: 1
        - name: userType
          required: true
          in: query
          description: Provide the user type either v1 or v2.
          schema:
            type: string
            example: v1
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "verifiedAdmins": [{
                      "_id":"6399ea8056d71c613fc75f39",
                      "username":"Sumair Admin",
                      "email":"admin@gamil.com",
                      "password":
                      "$2b$12$GPG4rmuYkaLFJqac2PRz2evZtd8ofqL5ekoea4Nwo3aRxQlsLni9K",
                      "role":"admin",
                      "isVerified":true,
                      "isEnabled": true
                    }],
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'

      security:
      - superAdminBearerAuth: []
  /super-admin/admins/disabled:
    get:
      tags: 
        - Super-Admin
      summary: Returns all disabled admins
      parameters:
        - name: userType
          required: true
          in: query
          description: Provide the user type either v1 or v2.
          schema:
            type: string
            example: v1

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "unverifiedAdmins": [{
                      "_id":"6399ea8056d71c613fc75f39",
                      "username":"Sumair Admin",
                      "email":"admin@gamil.com",
                      "password":
                      "$2b$12$GPG4rmuYkaLFJqac2PRz2evZtd8ofqL5ekoea4Nwo3aRxQlsLni9K",
                      "role":"admin",
                      "isVerified":false,
                      "isEnabled": false
                    }],
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []

  /super-admin/admins/enabled:
    get:
      tags: 
        - Super-Admin
      summary: Returns all enabled admins
      parameters:
        - name: userType
          required: true
          in: query
          description: Provide the user type either v1 or v2.
          schema:
            type: string
            example: v1

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "unverifiedAdmins": [{
                      "_id":"6399ea8056d71c613fc75f39",
                      "username":"Sumair Admin",
                      "email":"admin@gamil.com",
                      "password":
                      "$2b$12$GPG4rmuYkaLFJqac2PRz2evZtd8ofqL5ekoea4Nwo3aRxQlsLni9K",
                      "role":"admin",
                      "isVerified":true,
                      "isEnabled": true
                    }],
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []

  /super-admin/admins/{start}/{end}:
    get:
      tags: 
        - Super-Admin
      summary: Returns all admins
      parameters:
        - name: start
          required: true
          in: path
          description: Provide starting index to get start getting data from.
          schema:
            type: string
            example: 0
        - name: end
          required: true
          in: path
          description: Provide ending index till which to get data.
          schema:
            type: string
            example: 1
        - name: userType
          required: true
          in: query
          description: Provide user Type of admin.
          schema:
            type: string
            example: v1
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "Admins": [{
                      "_id":"6399ea8056d71c613fc75f39",
                      "username":"Sumair Admin",
                      "email":"admin@gamil.com",
                      "password":
                      "$2b$12$GPG4rmuYkaLFJqac2PRz2evZtd8ofqL5ekoea4Nwo3aRxQlsLni9K",
                      "role":"admin",
                      "isVerified":false,
                      "isEnabled": false
                    }],
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []

  /super-admin/admin/remove:
    patch:
      tags: 
        - Super-Admin
      summary: SuperAdmin can remove the unverified admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                adminId:
                  type: string
                  example: "6399ea8056d71c613fc75f39"
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "deletedUser": {
                      _id: '64afa0e23b0ad841f0292c66',
                      username: 'hashish-deferment61',
                      role: 'admin',
                      isTxPending: false,
                      walletAddress: '0x00503054E5b0fA7Acb7DD1a9379ceC9f66FF9041',
                      isVerified: false,
                      isEnabled: false,
                      isInfoAdded: false,
                      userType: 'v2',
                      isEmailNotificationEnabled: true,
                      isPushNotificationEnabled: true,
                      isFeatured: false,
                      __v: 0
                    },
                    "message": 'Admin deleted successfully.'
                    
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []


  /super-admin/admin/verify:
    patch:
      tags: 
        - Super-Admin
      summary: SuperAdmin can verify the admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                adminId:
                  type: string
                  example: "6399ea8056d71c613fc75f39"
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "message": "Admin verified.",
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []

  /super-admin/enable:
    patch:
      tags: 
        - Super-Admin
      summary: Enables an admin
     
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                adminId:
                  type: string
                  example: "6399ea8056d71c613fc75f39"
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "message": "Admin status Enabled.",
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []

  /super-admin/disable:
    patch:
      tags: 
        - Super-Admin
      summary: Disables an admin

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                adminId:
                  type: string
                  example: "6399ea8056d71c613fc75f39"
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "message": "Admin status disabled.",
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []
      
  /super-admin/template:
    post:
      tags: 
        - Super-Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "cars"
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        example: "isHybrid"
                      type:
                        type: string
                        example: Boolean
                     
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "message": "Template created successfully.",
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []

    get:
      tags: 
        - Super-Admin
      summary: Returns templates from start to end
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "templates": [
                        {
                            "_id": "63a17fdbdf852a1017aa2c98",
                            "name": "Cars",
                            "properties": [
                                {
                                    "key": "Suspension",
                                    "type": "String",
                                    "_id": "63a17fdbdf852a1017aa2c99"
                                },
                                {
                                    "key": "Engine",
                                    "type": "String",
                                    "_id": "63a17fdbdf852a1017aa2c9a"
                                },
                                {
                                    "key": "Color",
                                    "type": "String",
                                    "_id": "63a17fdbdf852a1017aa2c9b"
                                }
                            ],
                            "__v": 0
                        },
                        {
                            "_id": "63a1805e5cb0ae01ba9e1378",
                            "name": "Bikes",
                            "properties": [
                                {
                                    "key": "Hybrid",
                                    "type": "Boolean",
                                    "_id": "63a1805e5cb0ae01ba9e1379"
                                },
                                {
                                    "key": "EngineType",
                                    "type": "String",
                                    "_id": "63a1805e5cb0ae01ba9e137a"
                                },
                                {
                                    "key": "Gears",
                                    "type": "Number",
                                    "_id": "63a1805e5cb0ae01ba9e137b"
                                }
                            ]
                        }
                  ]
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []
      
  /super-admin/template/{start}/{end}:
    get:
      tags: 
        - Super-Admin
      summary: Returns templates from start to end
      parameters:
        - name: start
          required: true
          in: path
          description: Provide starting index to get start getting data from.
          schema:
            type: string
            example: 0
        - name: end
          required: true
          in: path
          description: Provide ending index till which to get data.
          schema:
            type: string
            example: 2
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "templates": [
                        {
                            "_id": "63a17fdbdf852a1017aa2c98",
                            "name": "Cars",
                            "properties": [
                                {
                                    "key": "Suspension",
                                    "type": "String",
                                    "_id": "63a17fdbdf852a1017aa2c99"
                                },
                                {
                                    "key": "Engine",
                                    "type": "String",
                                    "_id": "63a17fdbdf852a1017aa2c9a"
                                },
                                {
                                    "key": "Color",
                                    "type": "String",
                                    "_id": "63a17fdbdf852a1017aa2c9b"
                                }
                            ],
                            "__v": 0
                        },
                        {
                            "_id": "63a1805e5cb0ae01ba9e1378",
                            "name": "Bikes",
                            "properties": [
                                {
                                    "key": "Hybrid",
                                    "type": "Boolean",
                                    "_id": "63a1805e5cb0ae01ba9e1379"
                                },
                                {
                                    "key": "EngineType",
                                    "type": "String",
                                    "_id": "63a1805e5cb0ae01ba9e137a"
                                },
                                {
                                    "key": "Gears",
                                    "type": "Number",
                                    "_id": "63a1805e5cb0ae01ba9e137b"
                                }
                            ]
                        }
                  ]
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []
      
      
  /super-admin/drop/feature:
    patch:
      tags: 
        - Super-Admin
      summary: Updates isFeaturedSuperAdmin flag for a drop.
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dropId:
                  type: string
                  example: 63186494efc487d0d97b17b9

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "Drop Featured successfully."
                  }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'        

    get:
      tags: 
        - Super-Admin
      summary: Get Featured drop of the super admin.

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "FeaturedDrop": {
                      "totalNFTs": 0,
                      "totalNFTsSold": 0,
                      "NFTIds": [
                          "633afcf59ef382fd85ff83d2"
                      ],
                      "isCreatedOnBlockchain": false,
                      "txHash": "",
                      "status": "draft",
                      "_id": "633b07ba7c95ec1bc38d73a8",
                      "userId": "633af8b49ef382fd85ff83d0",
                      "title": "Not so  Fancy Drop",
                      "description": "This drop has the most eww NFTs ever",
                      "image": "SOME URL",
                      "startTime": "2025-11-30T18:21:58.129Z",
                      "endTime": "2025-11-30T18:38:38.129Z",
                      "saleType": "auction",
                      "__v": 0
                    }
                  }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'   
          
  /super-admin/admins/counts:
    get:
      tags: 
        - Super-Admin
      summary: Get Total number of admins in v1 and v2.
      parameters:
        - name: userType
          required: true
          in: query
          description: Provide user type either v1 or v2.
          schema:
            type: string
            example: v1
      security:
      - superAdminBearerAuth: []

      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "counts": {
                    "totalAdmins": 4,
                    "totalVerifiedAdmins": 2,
                    "totalUnverifiedAdmins": 2,
                    "totalEnabledAdmins": 1,
                    "totalDisabledAdmins": 1
                  },
                  
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'        
          
  /super-admin/admins/total-counts:
    get:
      tags: 
        - Super-Admin
      summary: Get Total number of admins in v1 and v2 both.

      security:
      - superAdminBearerAuth: []

      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "TotalAdmins": 5
                  }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500' 

#User routes
  /user/profile:
    put:
      tags:
        - User
      summary: Update user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "janedoe"
                bio:
                  type: string
                  example: "I am a fictitious name used as a placeholder"
                email:
                  type: string
                  example: "janedoe@gmail.com"
                imageURL:
                  type: string
                  example: "https://s3.amazonaws.com/bucketname/profile/jane.jpg"
                bannerURL:
                  type: string
                  example: "https://s3.amazonaws.com/bucketname/profile/jane-banner.jpg"
                domain: 
                  type: string
                  example: "Nike"
                companyName: 
                  type: string
                  example: "Nike"
                desgination: 
                  type: string
                  example: "CTO"
                industryType: 
                  type: string
                  example: "Sports"
                reasonForInterest: 
                  type: string
                  example: "Seperate domain to use xManna marketplace"

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  success: true,
                  message: "User updated successfully",
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
    get:
      tags:
        - User
      summary: Get user Profile
      
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  success: true,
                  userData: {
                      "_id": "6315c1717391701c785c5b43",
                      "email": "admin@gmail.com",
                      "username": "Sumair Admin",
                      "bannerURL": "localhost/banner.jpg",
                      "bio": "Admin in use",
                      "imageURL": "localhost/image.jpg"
                  },
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
  /user/admin/add-info:
    put:
      tags:
        - User
      summary: Add admin's domain information
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                domain: 
                  type: string
                  example: "Nike"
                companyName: 
                  type: string
                  example: "Nike"
                desgination: 
                  type: string
                  example: "CTO"
                industryType: 
                  type: string
                  example: "Sports"
                reasonForInterest: 
                  type: string
                  example: "Seperate domain to use xManna marketplace"
                description: 
                  type: string
                  example: "This is a test, description"
                marketplaceImage:
                  type: string
                  format: binary
                logoImage:
                  type: string
                  format: binary
                website:
                  type: string
                  example: https://scytalelabs.com/
                twitter:
                  type: string
                  example: https://twitter.com/scytalelabs
                discord:
                  type: string
                  example: https://discord.com/scytalelabs
                facebook:
                  type: string
                  example: https://www.facebook.com/scytalelabs
                instagram:
                  type: string
                  example: https://www.instagram.com/scytalelabs/
                
              required:
              - domain
              - companyName
              - desgination
              - industryType
              - reasonForInterest
              - marketplaceImage
              - description
              - logoImage

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  success: true,
                  message: "Admin information added successfully",
                }
        500: 
          $ref: '#/components/responses/standard500'

  /user/admin/update-info:
    put:
      tags:
        - User
      summary: Update admin's information.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                companyName: 
                  type: string
                  example: "Nike"
                bio: 
                  type: string
                  example: "We make the best shoes in the world."
                imageURL: 
                  type: string
                  example: "https://lh3.googleusercontent.com/a/AGNmyxabe1rRnjOFEdmOAe649R04NqiHe_hKZIqf4uX1=s96-c"
                bannerURL: 
                  type: string
                  example: "https://lh3.googleusercontent.com/a/AGNmyxabe1rRnjOFEdmOAe649R04NqiHe_/banner.url"
                username: 
                  type: string
                  example: "John W."
                

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  success: true,
                  message: "Admin information updated successfully",
                }
        500: 
          $ref: '#/components/responses/standard500'
          
  /user/check-domain:
    get:
      tags:
        - User
      summary: Check if the domain alredy exists.
      parameters:
        - name: domain
          required: true
          in: query
          description: Provide domain to check.
          schema:
            type: string
            example: nike.com

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                        "success": true,
                        "exists": true,
                        "message": "Domain already exists."
                    }
        500: 
          $ref: '#/components/responses/standard500'

          
  /user/marketplace:
    get:
      tags:
        - User
      summary: Get admin's data by domain.


      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                   "success": true,
                  "MarketplaceData": {
                      "_id": "64098c4eecf876ec187cb59e",
                      "imageURL": "https://lh3.googleusercontent.com/a/AGNmyxabe1rRnjOFEdmOAe649R04NqiHe_hKZIqf4uX1=s96-c",
                      "bannerURL": "https://lh3.googleusercontent.com/a/AGNmyxabe1rRnjOFEdmOAe649R04NqiHe_/banner.url"
                  }
                }
        500: 
          $ref: '#/components/responses/standard500'
  
  /user/marketplace/featured:
    get:
      tags:
        - User
      summary: Get featured admin's data .

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                   "success": true,
                  "MarketplaceData": {
                      "_id": "64098c4eecf876ec187cb59e",
                      "imageURL": "https://lh3.googleusercontent.com/a/AGNmyxabe1rRnjOFEdmOAe649R04NqiHe_hKZIqf4uX1=s96-c",
                      "domain": "nike.com",
                      "bannerURL": "https://lh3.googleusercontent.com/a/AGNmyxabe1rRnjOFEdmOAe649R04NqiHe_/banner.url"
                  }
                }
        500: 
          $ref: '#/components/responses/standard500'
    
          
  /user/admin/profile:

    get:
      tags:
        - User
      summary: Get admin Profile
      
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  success: true,
                  userData: {
        "_id": "64098c4eecf876ec187cb59e",
        "xmannaUserId": "64098331b3e2f75ba80d6432",
        "username": "M.Sumair Aslam",
        "email": "sami.crazy101@gmail.com",
        "role": "user",
        "imageURL": "https://lh3.googleusercontent.com/a/AGNmyxabe1rRnjOFEdmOAe649R04NqiHe_hKZIqf4uX1=s96-c",
        "isTxPending": false,
        "walletAddress": "0xb5aeD645bBde4CCE3879F209BA72025f97CDDf97",
        "privateKey": "efe025f150138d0bf5fc5211dff154cd2cfd37a19d59b35e02ae6fe98ebdde053e8ca43dce1e2ba46efc69e24c2ad4be42062d6437f05c602fa460ed48cb2dc7c8251abadc8c6d30a0248ca8e22457b2181823a03c493f66a3844da096b69ba6b6813fa65128d0fd4dbdfdb75050",
        "isVerified": false,
        "isEnabled": false,
        "isInfoAdded": true,
        "userType": "v1",
        "__v": 0,
        "companyName": "Ford",
        "designation": "CEO",
        "domain": "Cars",
        "industryType": "Auto moblie",
        "reasonForInterest": "To boost the overall sales.",
        "bannerURL": "https://lh3.googleusercontent.com/a/AGNmyxabe1rRnjOFEdmOAe649R04NqiHe_/banner.url"
                  },
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'

  /user/admin/statistics:
    get:
      tags:
        - User
      summary: Get admin statistic
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  success: true,
                  TotalCollections721: 1,
                  TotalCollections1155: 1,
                  TotalNFTs721: 2,
                  TotalNFTs1155: 2,
                  TotalNFTsOnSale721: 1,
                  TotalNFTsOnSale1155: 1,
                  TotalNFTsSoldFixedPrice: 1,
                  TotalNFTsSoldAuction: 1,
                  TotalDropsFixedPrice: 1,
                  TotalDropsAuction: 1
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'

  /user/auth/user-login:
    post:
      tags:
        - UserAuth
      summary: Create/Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                idToken:
                  type: string
                  example: "eyJhbGciOiJSUzI1NiIsImtpZCI6IjhlMGFjZjg5MWUwOTAwOTFlZjFhNWU3ZTY0YmFiMjgwZmQxNDQ3ZmEiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiI5NjM4NDM4OTY2MzgtcTQ2aTFkMTVrczh1Ym8zMmRqMnNzYWVzMWY5am8yM3EuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI5NjM4NDM4OTY2MzgtcTQ2aTFkMTVrczh1Ym8zMmRqMnNzYWVzMWY5am8yM3EuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDc1NjI2MjE2NDIxNjUwNTM4OTQiLCJlbWFpbCI6Im1vaHNpbmtuaWF6aTIyQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhdF9oYXNoIjoiaU1FSW5yS3FFSUR1R1BQY2c1Q1hjQSIsIm5hbWUiOiJNb2hzaW4iLCJwaWN0dXJlIjoiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwN2JZaVNVeVZxVjdTZzNNdzdraWhzam85VFFqZEpEQnF6R29yX2c9czk2LWMiLCJnaXZlbl9uYW1lIjoiTW9oc2luIiwibG9jYWxlIjoiZW4iLCJpYXQiOjE2NzI5NTI2NDAsImV4cCI6MTY3Mjk1NjI0MH0.WHluUiik00zSsOsMYPMlbNrG9rtTNCkmtuaR0A5SVgwVTSSZ8y8Sn_t__bY0I6pU105cQQ4A4cwo0et3fKOIwzF-7vDcl-5KuDKNUCJAZIkplND0GDfd_z53jMSDfEuoXFuOYa3lXM8NVtx787dYlHnITOaJDTUEUKKKXsjsultMpb7BgAHhgnn-WtCoV1mvPMY2T07T5Xjfe2vHsMdZn_s0s8q5euvBsPpl1CltVnI6DsOXls7FVgxGvaUJCFG98Jd93PpL_cqzq1ioxujDifaokt6S9bSwVUUbqL86FWWwkriaTQX8lJuLkBgTDohZtL9r4FA7NGEGzvLrkBzJ-Q"
                domain:
                  type: string
                  example: "nike.com"
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "New user created. Awaiting admin approval",
                  "raindropToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vaHNpbi5uaWF6aUBzY3l0YWxlbGFicy5jb20iLCJyb2xlIjoidXNlciIsInVzZXJJZCI6IjYzYmVmOTRlYWEyOTliNTdjZGE4MWRhOSIsImlhdCI6MTY3MzQ2MDA0NiwiZXhwIjo2MDAwMDE2NzM0NjAwNDZ9.Fo3IPOLHhc_0b5oyDpYlzHnCN0XewPXJGDIN5h_dydQ",
                  "walletAddress": "0xd2291ce35B82d6182a86B6E650d9C6e3929283b1",
                  "isInfoAdded": false,
                  "isVerified": false
              }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
  /user/auth/admin-login:
    post:
      tags:
        - UserAuth
      summary: Login/Create admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                idToken:
                  type: string
                  example: "eyJhbGciOiJSUzI1NiIsImtpZCI6IjhlMGFjZjg5MWUwOTAwOTFlZjFhNWU3ZTY0YmFiMjgwZmQxNDQ3ZmEiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiI5NjM4NDM4OTY2MzgtcTQ2aTFkMTVrczh1Ym8zMmRqMnNzYWVzMWY5am8yM3EuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI5NjM4NDM4OTY2MzgtcTQ2aTFkMTVrczh1Ym8zMmRqMnNzYWVzMWY5am8yM3EuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDc1NjI2MjE2NDIxNjUwNTM4OTQiLCJlbWFpbCI6Im1vaHNpbmtuaWF6aTIyQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhdF9oYXNoIjoiaU1FSW5yS3FFSUR1R1BQY2c1Q1hjQSIsIm5hbWUiOiJNb2hzaW4iLCJwaWN0dXJlIjoiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUVkRlRwN2JZaVNVeVZxVjdTZzNNdzdraWhzam85VFFqZEpEQnF6R29yX2c9czk2LWMiLCJnaXZlbl9uYW1lIjoiTW9oc2luIiwibG9jYWxlIjoiZW4iLCJpYXQiOjE2NzI5NTI2NDAsImV4cCI6MTY3Mjk1NjI0MH0.WHluUiik00zSsOsMYPMlbNrG9rtTNCkmtuaR0A5SVgwVTSSZ8y8Sn_t__bY0I6pU105cQQ4A4cwo0et3fKOIwzF-7vDcl-5KuDKNUCJAZIkplND0GDfd_z53jMSDfEuoXFuOYa3lXM8NVtx787dYlHnITOaJDTUEUKKKXsjsultMpb7BgAHhgnn-WtCoV1mvPMY2T07T5Xjfe2vHsMdZn_s0s8q5euvBsPpl1CltVnI6DsOXls7FVgxGvaUJCFG98Jd93PpL_cqzq1ioxujDifaokt6S9bSwVUUbqL86FWWwkriaTQX8lJuLkBgTDohZtL9r4FA7NGEGzvLrkBzJ-Q"

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "message": "New admin created. Awaiting super-admin approval",
                    "raindropToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vaHNpbi5uaWF6aUBzY3l0YWxlbGFicy5jb20iLCJyb2xlIjoidXNlciIsInVzZXJJZCI6IjYzYmVmOTRlYWEyOTliNTdjZGE4MWRhOSIsImlhdCI6MTY3MzQ2MDA0NiwiZXhwIjo2MDAwMDE2NzM0NjAwNDZ9.Fo3IPOLHhc_0b5oyDpYlzHnCN0XewPXJGDIN5h_dydQ",
                    "walletAddress": "0xd2291ce35B82d6182a86B6E650d9C6e3929283b1",
                    "isInfoAdded": false,
                    "isVerified": false
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'

#Add to cart routes
  /cart/:
    post:
      tags: 
        - ADD TO CART
      summary: Add to cart the nfts
      description: Add to cart the nfts that are on fixed-price sale.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nftId:
                  type: string
                  example: 63a8b43d577b363edde0bb6c
              required:
              - nftId
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "NFTs": [
                      {
                        "_id": "63aed052aecfec7eb6cc844c",
                        "userId": "63a955fdda285a928114a769",
                        "collectionId": "638729549aceae5077b76998",
                        "nftId": "63a8b43d577b363edde0bb6c",
                        "marketplaceId": "63a94b5c41e3e579eae38753",
                        "__v": 0
                      }
                  ],
                  "message": "NFT successfully added to Cart"
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

    get:
      tags: 
        - ADD TO CART
      summary: Returns user nfts in the cart.
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                     "success": true,
                  "NFTs": [
                      {
                        "_id": "63aed052aecfec7eb6cc844c",
                        "userId": "63a955fdda285a928114a769",
                        "collectionId": "638729549aceae5077b76998",
                        "nftId": "63a8b43d577b363edde0bb6c",
                        "marketplaceId": "63a94b5c41e3e579eae38753",
                        "__v": 0
                      }
                  ],
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - adminBearerAuth: []
      - userBearerAuth: []
      
    delete:
      tags: 
        - ADD TO CART
      summary: Delete the nfts
      description: Delete the nfts from the cart that were added.
      parameters:
        - name: nftId
          required: true
          in: query
          description: NFT id that was added in the cart.
          schema:
            type: string
            example: 63a8b43d577b363edde0bb6c
      
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "NFT successfully Deleted from the cart."
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []
      
  /cart/buy:
    post:
      tags: 
        - ADD TO CART
      summary: Buy the NFts added to cart
      
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "NFT successfully Bought."
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

#Platform FEE routes

  /platform-fee/admin:
    post:
      tags: 
        - PLATFROM_FEE
      summary: Make a request to change the platform fee for the admin. 
      description: Create a documetn in the database of the request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                platformFee:
                  type: number
                  example: 15

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "Platform fee request successfully made."
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []

  /platform-fee/super-admin:
    post:
      tags: 
        - PLATFROM_FEE
      summary: Change the platform fee for the super-admin. 
      description: Create a documetn in the database of the platform.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                platformFee:
                  type: number
                  example: 15

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "Platform fee set up successfully."
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - superAdminBearerAuth: []
      
    # get:
    #   tags: 
    #     - PLATFROM_FEE
    #   summary: Get the platform fee for the super-admin. 
      

    #   responses:
    #     200:
    #       description: Query was successful.
    #       content:
    #         application/json:
    #           schema:
    #             type: string
    #             example: {
    #               "success": true,
    #               "platformFee": {
    #                 "_id": '642e94e144eb2dd35a954f64',
    #                 "userId": '642e94e144eb2dd35a954f5b',
    #                 "platformFee": 15,
    #                 "isAccepted": 'accepted',
    #                 "createdAt": '2023-04-06T09:46:09.642Z',
    #                 "updatedAt": '2023-04-06T09:46:09.642Z',
    #                 "__v": 0
    #               }
    #           }
    #     400:
    #       $ref: '#/components/responses/standard400'
    #     404:
    #       $ref: '#/components/responses/standard404'
    #     500: 
    #       $ref: '#/components/responses/standard500'
                
    #   security:
    #   - superAdminBearerAuth: []
      
  /platform-fee/my-fee/status:
    get:
      tags: 
        - PLATFROM_FEE
      summary: Get the platform fee for the admin and super-admin. 
      

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "platformFee": {
                    "_id": '642e94e144eb2dd35a954f64',
                    "userId": '642e94e144eb2dd35a954f5b',
                    "platformFee": 25,
                    "isAccepted": 'accepted',
                    "createdAt": '2023-04-06T09:46:09.642Z',
                    "updatedAt": '2023-04-06T09:46:09.642Z',
                    "__v": 0
                  }
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - superAdminBearerAuth: []

      
  /platform-fee/super-admin/accept:
    patch:
      tags: 
        - PLATFROM_FEE
      summary: Accept a request of the admin for platform fee. 
      description: Change isAccepted enum from pending to accepted.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                platformFeeId:
                  type: string
                  example: 63c7b627fda607e108822dee

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "Platform fee successfully updated for the admin."
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - superAdminBearerAuth: []

  /platform-fee/super-admin/reject:
    patch:
      tags: 
        - PLATFROM_FEE
      summary: Reject a request of the admin for platform fee. 
      description: Change isAccepted enum to rejected.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                platformFeeId:
                  type: string
                  example: 63c7b627fda607e108822dee

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "Platform fee rejected."
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - superAdminBearerAuth: []

  /platform-fee/admin/status:
    get:
      tags: 
        - PLATFROM_FEE
      summary: Get platform fee requests based on their status. 
      parameters:
        - name: status
          required: true
          in: query
          description: Status if the request user want to get.
          schema:
            type: string
            example: pending

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "PlatformFee": [{
                    "_id": "63bd0e1a2e5aad04d4ea3a2f",
                    "userId": "63b2b04c8dd49962c845c282",
                    "platformFee": 15",
                    "isAccepted": "pending",
                    "createdAt": "2023-01-10T07:04:20.029Z",
                    "updatedAt": "2023-01-10T07:04:20.029Z",
                    "__v": 0
                      }],
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - superAdminBearerAuth: []

# COLLECTION ROUTES
  /collection/:
    post:
      tags: 
        - Collection
      summary: Create New Collection
      description: Create new collections. Make sure to provide the jwt token after login. 

      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Dragon collection"
                symbol:
                  type: string
                  example: "DRG"
                description:
                  type: string
                  example: "Collection to save rare NFT's"
                thumbnail:
                  type: string
                  format: binary
                banner:
                  type: string
                  format: binary
                royaltyFee:
                  type: integer
                  example: 5.5
                contractType:
                  type: string
                  example: "1155"
                categoryId:
                  type: string
                  example: "6320285d08b2bd78d120c884"
                marketplaceId:
                  type: string
                  example: "6320285d08b2bd78d120c884"

              required:
              - name
              - symbol
              - description
              - thumbnail
              - contractType
              - marketplaceId
              - categoryId
              
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
            $ref: '#/components/responses/standard200'
        400: 
            $ref: '#/components/responses/standard400'
        500:
            $ref: '#/components/responses/standard500'
        501:
          description: Unable to send create collection, try later
          
  /collection/{collectionId}:
    put:
      tags: 
        - Collection
      summary: Update the existing Collection
      description: Update existing collection's thumbnail and description. Make sure to provide collection id in the params. 
      parameters:
        - in: path
          name: collectionId
          schema:
            type: string
            example: "6320285d08b2bd78d120c884"
          required: true
          description: Id of the collection that needs to be edited
        - in: header
          name: auth
          schema:
            type: string
          required: true
          description: an authorization header
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: "Collection to save epic NFT's"
                thumbnail:
                  type: string
                  format: binary

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
            $ref: '#/components/responses/standard200'
        400: 
            $ref: '#/components/responses/standard400'
        500:
            $ref: '#/components/responses/standard500'
        501:
          description: Unable to send update collection, try later   
          
    get:
      tags: 
        - Collection
      summary: Query the data for a single Collection.
      parameters:
        - name: collectionId
          required: true
          in: path
          description: Provide the mongoose object id of required Collection.
          schema:
            type: string
            example: 6320285d08b2bd78d120c884
                  
      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

          
  /collection/txHash/{collectionId}:
    put:
      tags: 
        - Collection
      summary: Pass the transaction hash
      description: Pass the transaction hash of the collection creation to listen the events emitted by that transaction. 
      parameters:
        - in: path
          name: collectionId
          schema:
            type: string
            example: "6320285d08b2bd78d120c884"
          required: true
          description: Id of the collection that needs to be edited
        # - in: header
        #   name: auth
        #   schema:
        #     type: string
        #   required: true
        #   description: an authorization header
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                txHash:
                  type: string
                  example: "0xf3dc2623e152fb5a7d8d4ef4e52caf8245bad1fdd54981ea2def21b840978d9a"

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
            $ref: '#/components/responses/standard200'
        400: 
            $ref: '#/components/responses/standard400'
        500:
            $ref: '#/components/responses/standard500'
        501:
          description: Unable to send update collection, try later        
          
  /collection/approve:
    put:
      tags: 
        - Collection
      summary: Approve a collection
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                collectionId:
                  type: string
                  example: '6346c0286c74cc7ec6bcfef2'
                factoryType: 
                  type: string
                  enum: ['auction', 'fixed-price']
                  example: fixed-price
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
            $ref: '#/components/responses/standard200'
        400: 
            $ref: '#/components/responses/standard400'
        500:
            $ref: '#/components/responses/standard500'

  /collection/category/{categoryId}:
    get:
      summary: Get collection data for a specific category
      tags:
        - Collection
      parameters:
        - in: path
          name: categoryId
          schema:
            type: string
          required: true
          description: The ID of the category to retrieve collection data for.
        - in: query
          name: marketplaceId
          schema:
            type: string
          description: The ID of the marketplace to filter the collection data by.
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                "success": true,
                "collectionData": [
                    {
                        "_id": "64c7a9b6d389df4b9303986b",
                        "userId": "646a8115c52ab562c7a3407d",
                        "nftId": [],
                        "nftContractAddress": "",
                        "marketplaceId": "6470a01ac9d6a012f23f754c",
                        "dropId": null,
                        "name": "Zain",
                        "symbol": "TST",
                        "thumbnail": "https://mingablockchain.s3.amazonaws.com/Screenshot%20from%202022-05-15%2002-36-11.png",
                        "description": "Test",
                        "contractType": "1155",
                        "isDeployed": false,
                        "isAuctionDropVerified": false,
                        "isFixedPriceDropVerified": false,
                        "isSuperAdminApproved": false,
                        "royaltyFee": 10,
                        "isOnSale": false,
                        "categoryId": "64c7a7a69e18fd1cad0c7340",
                        "createdAt": "2023-07-31T12:31:50.753Z",
                        "updatedAt": "2023-07-31T12:31:50.753Z",
                        "__v": 0
                    }
                ]
            }
        400: 
            $ref: '#/components/responses/standard400'
        500:
            $ref: '#/components/responses/standard500'

  /collection/my-collections/{start}/{end}:
    get:
      tags: 
        - Collection
      summary: Query the data for collections from starting index to end.
      parameters:
        - name: start
          required: true
          in: path
          description: Starting index to begin fetch data from database.
          schema:
            type: number
            example: 10
        - name: end
          required: true
          in: path
          description: Ending index till which data will be fetched data from database.
          schema:
            type: number
            example: 20
                  
      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

  # /collection/collections/{start}/{end}:
  #   get:
  #     tags: 
  #       - Collection
  #     summary: Query the data for collections from starting index to end by domain.
  #     parameters:
  #       - name: start
  #         required: true
  #         in: path
  #         description: Starting index to begin fetch data from database.
  #         schema:
  #           type: number
  #           example: 10
  #       - name: end
  #         required: true
  #         in: path
  #         description: Ending index till which data will be fetched data from database.
  #         schema:
  #           type: number
  #           example: 20

  #     responses:
  #       200:
  #         $ref: '#/components/responses/standard200'
  #       400:
  #         $ref: '#/components/responses/standard400'
  #       404:
  #         $ref: '#/components/responses/standard404'
  #       500: 
  #         $ref: '#/components/responses/standard500'
                
  #     security:
  #     - adminBearerAuth: []
  #     - userBearerAuth: []


  /collection/my-collections/{collectionType}:
    get:
      tags: 
        - Collection
      summary: Query the data for all collections of a user.
      parameters:
        - name: collectionType
          required: true
          in: path
          description: user's specific type of collection to query.
          schema:
            type: string
            enum: ['721', '1155']
            example: '1155'
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "collectionData": [
                      {
                          "_id": "6361018c479f918ae8b8db4a",
                          "userId": "63620b5220007a2b5a50c60a",
                          "nftId": [
                              "6361022f479f918ae8b8db5e",
                          ],
                          "name": "My Collection",
                          "symbol": "CL",
                          "thumbnail": "https://mingablockchain.s3.amazonaws.com/image.png",
                          "description": "this is my test collection",
                          "isDeployed": true,
                          "isAuctionDropVerified": false,
                          "isFixedPriceDropVerified": false,
                          "__v": 1,
                          "contractType": "721"
                      }
                  ]
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []
  /collection/my-collections/pending-verification/{collectionType}/{start}/{end}:
    get:
      tags: 
        - Collection
      summary: Query the data for all collections of a user.
      parameters:
        - name: collectionType
          required: true
          in: path
          description: user's specific type of collection to query.
          schema:
            type: string
            enum: ['721', '1155']
            example: '1155'
        - name: start
          required: true
          in: path
          description: Starting index of NFTs required at one time.
          schema:
            type: integer
            example: 2
        - name: end
          required: true
          in: path
          description: Ending index of NFTs required at one time/
          schema:
            type: integer
            example: 4

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": [
                      {
                          "_id": "6361018c479f918ae8b8db4a",
                          "userId": "63620b5220007a2b5a50c60a",
                          "nftId": [
                              "6361022f479f918ae8b8db5e",
                          ],
                          "name": "My Collection",
                          "symbol": "CL",
                          "thumbnail": "https://mingablockchain.s3.amazonaws.com/image.png",
                          "description": "this is my test collection",
                          "isDeployed": true,
                          "isAuctionDropVerified": false,
                          "isFixedPriceDropVerified": false,
                          "__v": 1,
                          "contractType": "721"
                      }
                  ]
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []
  

  /collection/rarities/{collectionId}:
    get:
      tags: 
        - Collection
      summary: Query the rarties of Collection NFT properties.
      parameters:
        - name: collectionId
          required: true
          in: path
          description: Provide the mongoose object id of required Collection.
          schema:
            type: string
            example: 6320285d08b2bd78d120c884
                  
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "rarities": {
                      "artist": {
                          "Coldplay": 0.16666666666666666,
                          "Atif Aslam": 0.6666666666666666
                      },
                    }
                }

        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []
  
  /collection/statistics/{collectionId}:
    get:
      tags:
        - Collection
      summary: Detailed information for NFTs inside collections.
      parameters:
        - name: collectionId
          required: true
          in: path
          description: Provide the mongoose object id of required Collection.
          schema:
            type: string
            example: 6320285d08b2bd78d120c884
                  
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "data": {
                        "totalNFTs": 3,
                        "royaltyFees": 5.6,
                        "createdAt": "2022-11-25T08:27:59.237Z",
                        "uniqueOwners": 1,
                        "uniqueOwnership": 0,
                        "listingsCount": 2,
                        "volume": "0.20005",
                        "floorPrice": "0.00000005",
                        "bestOffer": "0.000052"
                    }
                }

        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

  /collection/is-on-sale/{collectionId}:
    get:
      tags:
        - Collection
      summary: Returns the total number of NFTs and NFTs on sale.
      parameters:
        - name: collectionId
          required: true
          in: path
          description: Provide the mongoose object id of required Collection.
          schema:
            type: string
            example: 6320285d08b2bd78d120c884
                  
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "isOnSale": true,
                    "totalNFTs": 3,
                    "totalNFTsOnSale": 1
                }

        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []
  
      
# NFT routes:
  /nft/getSingleNFT{nftId}:
    get:
      tags: 
        - NFTs
      summary: Query the data for a single NFT.
      parameters:
        - name: nftId
          required: true
          in: path
          description: Provide the mongoose object id of required NFT.
          schema:
            type: string
            example: 631afe21aceb6c7a179086b0
                  
      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []
      
  /nft/my-nft/{nftId}:
    get:
      tags: 
        - NFTs
      summary: Query the data for a single NFT.
      parameters:
        - name: nftId
          required: true
          in: path
          description: Provide the mongoose object id of required NFT.
          schema:
            type: string
            example: 6482cfdaa31ca8e0243dadbd
                  
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": {
                      "isBatchCreated": false,
                      "_id": "6482cfdaa31ca8e0243dadbd",
                      "minterId": "6482ce462a64277178099802",
                      "ownerId": "6482ce462a64277178099802",
                      "collectionId": "6482cf94a31ca8e0243dadab",
                      "dropId": "6482d017a31ca8e0243dadd0",
                      "nftId": "2940000592",
                      "title": "Collection category Testing NFTs",
                      "nftFormat": "jpg",
                      "mintingType": "simple-mint",
                      "nftURI": "blockchainTransactiontesting.com",
                      "metadataURI": "blockchainTransactionNFTtesting.com",
                      "txHash": "",
                      "isMinted": false,
                      "rank": 0,
                      "isOnSale": false,
                      "totalSupply": 15,
                      "__v": 0,
                      "currentOrderListingId": {
                          "supplySold": 0,
                          "_id": "6482d066a31ca8e0243dadea",
                          "supply": 15,
                          "price": "100",
                          "isSold": false
                      },
                      "isBlocked": false,
                      "UserOwnedSupply": 15
                  }
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []
  
      
  /nft/my-nfts/{start}/{end}:
    get:
      tags: 
        - NFTs
      summary: Query the data for your NFTs on Sale.
      parameters:
        - name: start
          required: true
          in: path
          description: Provide starting index.
          schema:
            type: number
            example: 0
        - name: end
          required: true
          in: path
          description: Provide end index.
          schema:
            type: number
            example: 5

      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []      

      
  /nft/my-nfts/{onSale}:
    get:
      tags: 
        - NFTs
      summary: Query the data for your NFTs on Sale.
      parameters:
        - name: onSale
          required: true
          in: path
          description: Provide true or false to get the nfts.
          schema:
            type: string
            example: true
                  
      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []      
      
  /nft/nfts/{start}/{end}:
    get:
      tags: 
        - NFTs
      summary: Query the data for your NFTs on Sale by domain.
      parameters:
        - name: start
          required: true
          in: path
          description: Provide starting index.
          schema:
            type: number
            example: 0
        - name: end
          required: true
          in: path
          description: Provide end index.
          schema:
            type: number
            example: 5

      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []      

      
  /nft/nfts/{onSale}:
    get:
      tags: 
        - NFTs
      summary: Query the data for your NFTs on Sale by domain.
      parameters:
        - name: onSale
          required: true
          in: path
          description: Provide true or false to get the nfts.
          schema:
            type: string
            example: true
      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []      

      
  /nft/addNFTs:
    post:
      tags: 
      - NFTs
      summary: Create any number of NFTs, can also create a single NFT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collectionId:
                  type: string
                  example: 63186494efc487d0d97b17b6
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                        example: My super NFT
                      totalSuply:
                        type: number
                        example: 5
                      description:
                        type: string
                        example: This is my special NFT, its very awesome.
                      collectionId:
                        type: string
                        example: 63186494efc487d0d97b17b6
                      nftURI:
                        type: string
                        example: https://scytalelabs.mypinata.cloud/ipfs/nft.png
                      previewImageURI:
                        type: string
                        example: https://scytalelabs.mypinata.cloud/ipfs/previewimage.png
                        description: This field becomes a required one if the NFT is a video, 3d image or audio.
                      metadataURI:
                        type: string
                        example: https://scytalelabs.mypinata.cloud/ipfs/metadata.json
                      nftFormat:
                        type: string
                        example: PNG
                      'type':
                        type: string
                        enum:
                        - Mastercraft     
                        - Common
                        - Rare
                        - Epic
                        - Legendary
                        - Uncommon
                        example: Epic
                      tokenSupply:
                        type: integer
                        example: 1                      
                      supplyType:
                        type: string
                        enum:
                        - Single
                        - Variable
                      properties:
                        type: object
                        example:
                          {
                            "Artist": "Van Gough",
                            "Location": "France"
                          }
                        description: This field can have an number of key value pairs, including zero
                      userAddress:
                        type: string
                        example: '0x2EDb32c1B0229v04Dff6c54cF8bq53855b4274f6'
                      'rarity':
                        type: string
                        enum:
                        - Common
                        - Uncommon
                        - Rare
                        - Epic
                        - Legendary
                    required:
                    - title
                    - nftURI
                    - metadataURI
                    - collectionId
                    - nftFormat
                    - userAddress
                    - totalSuply

      security:
      - adminBearerAuth: []
      - userBearerAuth: []
                        
      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
  /nft/{nftId}:
    put:
      tags: 
        - NFTs
      summary: Update NFTs.
      parameters:
        - name: nftId
          required: true
          in: path
          description: Provide the collection id.
          schema:
            type: string
            example: 631afe21aceb6c7a179086b0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: My super NFT
                description:
                  type: string
                  example: This is my special NFT, its very awesome.
                'type':
                  type: string
                  enum:
                  - Mastercraft     
                  - Common
                  - Rare
                  - Epic
                  - Legendary
                  - Uncommon
                  example: Epic
                totalSupply:
                  type: integer
                  example: 1                      
                supplyType:
                  type: string
                  enum:
                  - Single
                  - Variable
                properties:
                  type: object
                  example:
                    {
                      "Artist": "Van Gough",
                      "Location": "France"
                    }
                  description: This field can have an number of key value pairs, including zero
                nftFormat:
                  type: string
                  example: png
                metadataURI:
                  type: string
                  example: https://scytalelabs.mypinata.cloud/ipfs/metadata.json
                nftURI:
                  type: string
                  example: https://scytalelabs.mypinata.cloud/ipfs/nft.png
                previewImageURI:
                  type: string
                  example: https://scytalelabs.mypinata.cloud/ipfs/previewimage.png
                  description: This field becomes a required one if the NFT is a video, 3d image or audio.

      security:
      - adminBearerAuth: []
      - userBearerAuth: []
    
      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
          
  /nft/minted:
    put:
      tags: 
        - NFTs
      summary: Update NFTs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                txHash:
                  type: string
                  example: '0x2592cf699903e83bfd664aa4e339388fd044fe31643a85037be803a5d162729f'
                nftId: 
                  type: integer
                  example: 25
                nftObjectId:
                  type: string
                  example: 63316e13e36c4ec47f859a54
      security:
      - adminBearerAuth: []
      - userBearerAuth: []
    
      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'    
        
  /nft/getNFTsByCollection/{collectionId}/{start}/{end}:
    get:
      tags: 
        - NFTs
      summary: Query the data for NFTs in a collection.
      parameters:
        - name: collectionId
          required: true
          in: path
          description: Provide the collection id.
          schema:
            type: string
            example: 631afe21aceb6c7a179086b0
        - name: start
          required: true
          in: path
          description: Starting index of NFTs required at one time.
          schema:
            type: integer
            example: 2
        - name: end
          required: true
          in: path
          description: Ending index of NFTs required at one time/
          schema:
            type: integer
            example: 4

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
  /nft/{collectionId}/{start}/{end}:
    get:
      tags: 
        - NFTs
      summary: Query limited  data for NFTs in a collection.
      parameters:
        - name: collectionId
          required: true
          in: path
          description: Provide the collection id.
          schema:
            type: string
            example: 631afe21aceb6c7a179086b0
        - name: start
          required: true
          in: path
          description: Starting index of NFTs required at one time.
          schema:
            type: integer
            example: 2
        - name: end
          required: true
          in: path
          description: Ending index of NFTs required at one time/
          schema:
            type: integer
            example: 4

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": [
                      {
                          "_id": "633afcf59ef382fd85ff83d2",
                          "title": "NFT 1",
                          "nftURI": "https://scytalelabs.mypinata.cloud/ipfs/LmVTKRH5oJ6DfhNBSSFfgMxbG8KEy1Cy9ebXtzPwGMnPZa/0.png"
                      },
                      {
                          "_id": "633afd459ef382fd85ff83d3",
                          "title": "NFT 2",
                          "nftURI": "https://scytalelabs.mypinata.cloud/ipfs/LmVTKRH5oJ6DfhNBSSFfgMxbG8KEy1Cy9ebXtzPwGMnPZa/1.png"
                      }
                  ]
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
          
  /nft/rarities:
    get:
      tags: 
        - NFTs
      summary: Get all the rarities.
      
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "Rarities": [
                      "Common",
                      "Uncommon",
                      "Rare",
                      "Epic",
                      "Legendary"
                  ]
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
          
  /nft/{collectionId}:
    get:
      tags: 
        - NFTs
      summary: Query limited  data for NFTs in a collection.
      parameters:
        - name: collectionId
          required: true
          in: path
          description: Provide the collection id.
          schema:
            type: string
            example: 631afe21aceb6c7a179086b0

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": [
                      {
                          "_id": "633afcf59ef382fd85ff83d2",
                          "title": "NFT 1",
                          "nftURI": "https://scytalelabs.mypinata.cloud/ipfs/LmVTKRH5oJ6DfhNBSSFfgMxbG8KEy1Cy9ebXtzPwGMnPZa/0.png",
                          "totalSupply": 1,
                          "nftId": 1,
                          "supplyType": "1155",
                          "nftFormat":"jpg",
                          "collectionId": {
                              "_id": "64905623d733d447023d3aff",
                              "name": "NFTS SUpply Collection"
                          },
                      },
                  ]
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
#Batch Mint
  /batch-mint/:
    post:
      tags: 
        - Batch Mint
      summary: Initialize a new batch of NFTs, and populate it with a NFT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collectionId:
                  type: string
                  example: 63186494efc487d0d97b17b6
                title:
                  type: string
                  example: My super NFT
                description:
                  type: string
                  example: This is my special NFT, its very awesome.
                nftURI:
                  type: string
                  example: https://scytalelabs.mypinata.cloud/ipfs/nft.png
                previewImageURI:
                  type: string
                  example: https://scytalelabs.mypinata.cloud/ipfs/previewimage.png
                  description: This field becomes a required one if the NFT is a video, 3d image or audio.
                metadataURI:
                  type: string
                  example: https://scytalelabs.mypinata.cloud/ipfs/metadata.json
                nftFormat:
                  type: string
                  example: PNG
                'type':
                  type: string
                  enum:
                  - Mastercraft     
                  - Common
                  - Rare
                  - Epic
                  - Legendary
                  - Uncommon
                  example: Epic
                tokenSupply:
                  type: integer
                  example: 1                      
                supplyType:
                  type: string
                  enum:
                  - Single
                  - Variable
                properties:
                  type: object
                  example:
                    {
                      "Artist": "Van Gough",
                      "Location": "France"
                    }
                  description: This field can have an number of key value pairs, including zero
              required:
              - title
              - collectionId
              - nftURI
              - metadataURI
              - nftFormat
      
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: Batch creation was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "batchId": "632c7a7e6cab34403e3967e5",
                    "nftId": "632c7a7e6cab34403e3967e6",
                    "message": "Batch created successfully!"
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /batch-mint/nft:
    post:
      tags: 
        - Batch Mint
      summary: Add new NFTs to an existing batch.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collectionId:
                  type: string
                  example: 63186494efc487d0d97b17b6
                batchId:
                  type: string
                  example: 63186494ef2487d0d97b17b3
                title:
                  type: string
                  example: My super NFT
                description:
                  type: string
                  example: This is my special NFT, its very awesome.
                nftURI:
                  type: string
                  example: https://scytalelabs.mypinata.cloud/ipfs/nft.png
                previewImageURI:
                  type: string
                  example: https://scytalelabs.mypinata.cloud/ipfs/previewimage.png
                  description: This field becomes a required one if the NFT is a video, 3d image or audio.
                metadataURI:
                  type: string
                  example: https://scytalelabs.mypinata.cloud/ipfs/metadata.json
                nftFormat:
                  type: string
                  example: PNG
                'type':
                  type: string
                  enum:
                  - Mastercraft     
                  - Common
                  - Rare
                  - Epic
                  - Legendary
                  - Uncommon
                  example: Epic
                tokenSupply:
                  type: integer
                  example: 1                      
                supplyType:
                  type: string
                  enum:
                  - Single
                  - Variable
                properties:
                  type: object
                  example:
                    {
                      "Artist": "Van Gough",
                      "Location": "France"
                    }
                  description: This field can have an number of key value pairs, including zero
              required:
              - title
              - collectionId
              - batchId
              - nftURI
              - metadataURI
              - nftFormat
      
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: Batch created was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "nftId": "632c7a7e6cab34403e3967e6",
                    "message": "NFT created and added to collection and batch created successfully!"
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /batch-mint/nft/{nftObjId}:
    delete:
      tags:
        - Batch Mint
      summary: Delete a single NFT from an existing batch.
      parameters:
        - name: nftObjId
          required: true
          in: path
          description: Provide the mongoose object id of NFT that needs to be removed.
          schema:
            type: string
            example: 631afe21aceb6c7a179086b0

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /batch-mint/{batchId}:
    get:
      tags: 
        - Batch Mint
      summary: Query the data for a batch.
      parameters:
        - name: batchId
          required: true
          in: path
          description: Provide the mongoose object id of required batch.
          schema:
            type: string
            example: 631afe21aceb6c7a179086b0
                  
      responses:
        '200':
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "batchData": [
                      {
                          "nftIds": [
                              "632c7a7e6cab34403e3967e4"
                          ],
                          "isMintedOnFrontend": false,
                          "isMintedOnBlockChain": false,
                          "_id": "632c7a7e6cab34403e3967e5",
                          "userId": "63186282efc487d0d97b17b5",
                          "__v": 0
                      }
                  ]
              }
                
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

    delete:
      tags:
        - Batch Mint
      summary: Delete an entire batch.
      parameters:
        - name: batchId
          required: true
          in: path
          description: Provide the mongoose object id of batch that needs to be removed.
          schema:
            type: string
            example: 631afe21aceb6c7a179086b0

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /batch-mint/tx-hash:
    put:
      tags:
        - Batch Mint
      summary: Update tx hash of a batch.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                batchId:
                  type: string
                txHash:
                  type: string

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
  /batch-mint/minted/{batchId}:
    put:
      tags: 
        - Batch Mint
      summary: Update batch NFTs after minting on blockchain
      parameters:
        - name: batchId
          required: true
          in: path
          description: Provide the mongoose object id of the batch whose ids are required.
          schema:
            type: string
            example: 631afe21aceb6c7a179086b0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                blockchainIds:
                  type: array
                  items:
                    type: integer
                  example: [1, 2]
                  
      responses:
        200:
          $ref: '#/components/responses/standard200'                
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []
  
  /batch-mint/finalize/{batchId}:
    patch:
      tags:
        - Batch Mint
      summary: Change the status of batch and nfts in it.
      parameters:
        - name: batchId
          required: true
          in: path
          description: Provide the mongoose object id of required batch.
          schema:
            type: string
            example: 631afe21aceb6c7a179086b0

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Batch and NFTs isBatchCreated flag updated successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "message": "Batch has been created on blockchain."
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
  
  
  /batch-mint/collection:
    put:
      tags:
        - Batch Mint
      summary: Change the collection of a batch and its NFTs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                batchId:
                  type: string
                  example: 63186282efc487d0d97b17b5
                collectionId:
                  type: string
                  example: 63186282efc487d0d27b27e1

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
#DROP
  /drop/:
    post:
      tags: 
        - Drop & Marketplace
      summary: Initialize a new drop.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: My fancy Drop
                image:
                  type: string
                  example: https://scytalelabs.mypinata.cloud/ipfs/nft.png
                description:
                  type: string
                  example: This is my special drop, its very awesome.
                saleType:
                  type: string
                  enum:
                  - fixed-price     
                  - auction
                  example: auction
                dropType:
                  type: string
                  enum:
                  - '721'     
                  - '1155'
                  example: 1155
                bannerURL: 
                  type: string
                  example: 's3-banner-url'
                marketplaceId:
                  type: string
                  example: 63186282efc487d0d27b27e1
                categoryId:
                  type: string
                  example: 63186282efc487d0d27b22e4

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: Drop creation was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "dropId": "633b07bf7c95ec1bc38d73a9",
                    "message": "Drop created successfully!"
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
    
    get:
      tags: 
        - Drop & Marketplace

      summary: Get drops
      description: Retrieve a list of featured assets based on the provided parameters. 
        The list will be paginated using the `start` and `end` query parameters.

      parameters:
        - in: query
          name: start
          schema:
            type: integer
            format: int32
          required: true
          description: The starting index of the pagination.

        - in: query
          name: end
          schema:
            type: integer
            format: int32
          required: true
          description: The ending index of the pagination.

        - in: query
          name: marketplaceId
          schema:
            type: string
          description: The marketplace ID to filter the featured assets.

        - in: query
          name: saleType
          schema:
            type: string
          description: The sale type to filter the featured assets.

        - in: query
          name: categoryId
          schema:
            type: string
          description: The category to filter the featured assets.

        - in: query
          name: status
          schema:
            type: string
          description: The status to filter the featured assets.     

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: everything was okay.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": [
                      {
                          "_id": "646bb522d8d004e0b43ecf30",
                          "userId": "646a8115c52ab562c7a3407d",
                          "title": "LaLiga",
                          "image": "dummy-url",
                          "description": "Offical drop for laliga",
                          "dropCloneAddress": "",
                          "totalNFTs": 1,
                          "totalNFTsSold": 1,
                          "NFTIds": [
                              "646bb4e59baa672faa09af2d"
                          ],
                          "isCreatedOnBlockchain": true,
                          "txHash": "",
                          "status": "active",
                          "saleType": "fixed-price",
                          "dropType": "1155",
                          "isFeatured": false,
                          "isFeaturedSuperAdmin": false,
                          "bannerURL": "kajsfbfkjasb",
                          "createdAt": "2023-05-22T18:32:02.958Z",
                          "updatedAt": "2023-05-22T18:57:26.043Z",
                          "__v": 1,
                          "category": "Meta Racers"
                      }
                  ]
              }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'

        
  /drop/start-time:
    patch:
      tags: 
        - Drop & Marketplace
      summary: Initialize a new drop.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dropId:
                  type: string
                  example: 63c659d5042a90612d52a997
                startTime:
                  type: string
                  example: 1764526918129
                endTime: 
                  type: string
                  example: 1764526919129

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: Drop start time and end time updation was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "message": "Drop start and end time updated successfully."
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /drop/{dropId}/tx-cost-summary:
    get:
      tags: 
        - Drop & Marketplace
      summary: get blockchain txs summary for drop creation
      parameters:
        - name: dropId
          required: true
          in: path
          description: Provide the mongoose object id of required Drop.
          schema:
            type: string
            example: 6320285d08b2bd78d120c884

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: everything was okay.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": {
                      "collectionTxSummary": {
                          "collectionCount": 1,
                          "txsCount": 1
                      },
                      "NFTsTxSummary": {
                          "NFTCount": 1,
                          "txsCount": 1
                      },
                      "approvalSummary": {
                          "NFTCount": 1,
                          "txsCount": 1
                      }
                  }
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
  /drop/category-drops/{categoryId}:
    get:
      tags: 
        - Drop & Marketplace
      summary: get drops grouped by categories
      description: Retrieve a list of category drops.
      parameters:
        - in: path
          name: categoryId
          description: The category id of drops to retrieve.
          required: true
          schema:
            type: string
            enum: ["meta-racers", "digital-memberships", "app-downloads", "mystery-boxes", "land-plots"]
        - in: query
          name: start
          description: The starting index of the result set.
          schema:
            type: integer
        - in: query
          name: end
          description: The ending index of the result set.
          schema:
            type: integer

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: everything was okay.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": [
                      {
                          "_id": "646bb522d8d004e0b43ecf30",
                          "userId": "646a8115c52ab562c7a3407d",
                          "title": "LaLiga",
                          "image": "SOME URL",
                          "description": "Offical drop for laliga",
                          "dropCloneAddress": "",
                          "totalNFTs": 1,
                          "totalNFTsSold": 1,
                          "NFTIds": [
                              "646bb4e59baa672faa09af2d"
                          ],
                          "isCreatedOnBlockchain": true,
                          "txHash": "",
                          "status": "active",
                          "saleType": "fixed-price",
                          "dropType": "1155",
                          "isFeatured": false,
                          "isFeaturedSuperAdmin": false,
                          "bannerURL": "kajsfbfkjasb",
                          "createdAt": "2023-05-22T18:32:02.958Z",
                          "updatedAt": "2023-05-22T18:57:26.043Z",
                          "__v": 1,
                          "category": "meta-racers"
                      }
                  ]
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /drop/categories:
    get:
      tags: 
        - Drop & Marketplace
      summary: returns categories of the drops

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: everything was okay.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "categories": [
                      "meta-racers",
                      "digital-memberships",
                      "app-downloads",
                      "mystery-boxes",
                      "land-plots"
                  ]
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /drop/finalize:
    post:
      tags: 
        - Drop & Marketplace
      summary: Finalize a drop and send its txs to blockchain.
      description: returns response while the txs are in being made on the server.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dropId:
                  type: string

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: txs setup was okay.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "message": "transactions are being processed..."
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /drop/nft:
    put:
      tags: 
        - Drop & Marketplace
      summary: Add NFTs to an existing drop.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nftId:
                  type: string
                  example: 63186494efc487d0d97b17b6
                dropId:
                  type: string
                  example: 63186494efc487d0d97b17b9
                price: 
                  type: string
                  example: 20000000000000000
                supply:
                  type: integer
                  example: 5

              required:
                - nftId
                - dropId
                - price

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /drop/status/pending:
    put:
      tags: 
        - Drop & Marketplace
      summary: Updates status before sending tx to blockchain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dropId:
                  type: string
                  example: 63186494efc487d0d97b17b9

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'        

  /drop/txHash:
    put:
      tags: 
        - Drop & Marketplace
      summary: Updates txHash for a drop.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dropId:
                  type: string
                  example: 63186494efc487d0d97b17b9
                txhash:
                  type: string
                  example: '0x6146ccf6a66d994f7c363db875e31ca35581450a4bf6d3be6cc9ac79233a69d0'

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'        

  /drop/statistics/{dropId}:
    get:
      tags:
        - Drop & Marketplace
      summary: Detailed information for NFTs inside a drop.
      parameters:
        - name: dropId
          required: true
          in: path
          description: Provide the mongoose object id of required Drop.
          schema:
            type: string
            example: 6320285d08b2bd78d120c884
                  
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": {
                      "totalNFTs": 2,
                      "uniqueOwners": 1,
                      "uniqueOwnership": 1,
                      "listingsCount": 2,
                      "volume": "0.000000000020005",
                      "floorPrice": "0.000000000000005",
                      "bestOffer": "0.00000000000000022"
                  }
              }

        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

  /drop/{status}/{start}/{end}:
    get:
      tags: 
        - Drop & Marketplace
      summary: Query the data for drops with a certain status.
      parameters:
        - name: status
          required: true
          in: path
          description: Drop status to query.
          schema:
            type: string
            enum: 
              - draft
              - pending 
              - active
              - closed
        - name: start
          required: true
          in: path
          description: Starting index of pagination.
          schema:
            type: integer
            example: 2
        - name: end
          required: true
          in: path
          description: Ending index of pagination.
          schema:
            type: integer
            example: 4

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "data": [
                        {
                            "totalNFTs": 1,
                            "totalNFTsSold": 0,
                            "NFTIds": [
                                "633afcf59ef382fd85ff83d2"
                            ],
                            "isCreatedOnBlockchain": false,
                            "txHash": "SOME HASH HAHA",
                            "status": "pending",
                            "_id": "633affbfd1a8f00a1b493964",
                            "userId": "633af8b49ef382fd85ff83d0",
                            "title": "Not so  Fancy Drop",
                            "description": "This drop has the most eww NFTs ever",
                            "image": "SOME URL",
                            "startTime": "2025-11-30T18:21:58.129Z",
                            "endTime": "2025-11-30T18:38:38.129Z",
                            "saleType": "auction",
                            "__v": 1
                        }
                    ]
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /drop/my-drops/{status}/{start}/{end}:
    get:
      tags: 
        - Drop & Marketplace
      summary: Query the data for drops for user logged in.
      parameters:
        - name: start
          required: true
          in: path
          description: Starting index of pagination.
          schema:
            type: integer
            example: 0
        - name: end
          required: true
          in: path
          description: Ending index of pagination.
          schema:
            type: integer
            example: 4
        - name: status
          required: true
          in: path
          description: Drop status to query.
          schema:
            type: string
            enum: 
              - draft
              - pending 
              - active
              - closed

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "dropsCount": 1,
                    "data": [
                        {
                            "_id": "634977f37f31d33f5fc3c5a0",
                            "userId": "63458dc14bd05daab34d6c31",
                            "title": "Not so  Fancy Drop",
                            "image": "SOME URL",
                            "description": "This drop has the most eww NFTs ever",
                            "startTime": "2025-11-30T18:21:58.129Z",
                            "endTime": "2025-11-30T18:38:38.129Z",
                            "totalNFTs": 1,
                            "totalNFTsSold": 1,
                            "NFTIds": [
                                "63458dd84bd05daab34d6c3a"
                            ],
                            "isCreatedOnBlockchain": false,
                            "txHash": "",
                            "status": "active",
                            "saleType": "auction",
                            "__v": 1
                        }
                    ]
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /drop/saleType/{saleType}:
    get:
      tags: 
        - Drop & Marketplace
      summary: Query the data for drops with a certain sale type.
      parameters:
        - name: saleType
          required: true
          in: path
          description: Drop sale type to query.
          schema:
            type: string
            enum: 
              - auction
              - fixed-price 
        - name: start
          required: true
          in: query
          description: Starting index of pagination.
          schema:
            type: integer
            example: 2
        - name: end
          required: true
          in: query
          description: Ending index of pagination.
          schema:
            type: integer
            example: 4
        - name: status
          required: true
          in: query
          description: Status of the drop.
          schema:
            type: string
            example: draft

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": [
                      {
                          "_id": "633aaf701bff54700fcb453a",
                          "totalNFTs": 0,
                          "totalNFTsSold": 0,
                          "NFTIds": [
                              "63316e13e36c4ec47f859a54"
                          ],
                          "isCreatedOnBlockchain": false,
                          "txHash": "",
                          "status": "draft",
                          "userId": "63186282efc487d0d97b17b5",
                          "title": "Not so  Fancy Drop",
                          "description": "This drop has the most eww NFTs ever",
                          "image": "SOME URL",
                          "startTime": "2025-11-30T18:21:58.129Z",
                          "endTime": "2025-11-30T18:38:38.129Z",
                          "__v": 1,
                          "saleType": "fixed-price"
                      }
                  ]
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  # /drop/saleType/{saleType}/{start}/{end}:
  #   get:
  #     tags: 
  #       - Drop & Marketplace
  #     summary: Query the data for drops with a certain sale type.
  #     parameters:
  #       - name: saleType
  #         required: true
  #         in: path
  #         description: Drop sale type to query.
  #         schema:
  #           type: string
  #           enum: 
  #             - auction
  #             - fixed-price 
  #       - name: start
  #         required: true
  #         in: path
  #         description: Starting index of pagination.
  #         schema:
  #           type: integer
  #           example: 2
  #       - name: end
  #         required: true
  #         in: path
  #         description: Ending index of pagination.
  #         schema:
  #           type: integer
  #           example: 4

  #     security:
  #     - adminBearerAuth: []
  #     - userBearerAuth: []

  #     responses:
  #       200:
  #         description: Query was successful.
  #         content:
  #           application/json:
  #             schema:
  #               type: string
  #               example: {
  #                 "success": true,
  #                 "data": [
  #                     {
  #                         "_id": "633aaf701bff54700fcb453a",
  #                         "totalNFTs": 0,
  #                         "totalNFTsSold": 0,
  #                         "NFTIds": [
  #                             "63316e13e36c4ec47f859a54"
  #                         ],
  #                         "isCreatedOnBlockchain": false,
  #                         "txHash": "",
  #                         "status": "draft",
  #                         "userId": "63186282efc487d0d97b17b5",
  #                         "title": "Not so  Fancy Drop",
  #                         "description": "This drop has the most eww NFTs ever",
  #                         "image": "SOME URL",
  #                         "startTime": "2025-11-30T18:21:58.129Z",
  #                         "endTime": "2025-11-30T18:38:38.129Z",
  #                         "__v": 1,
  #                         "saleType": "fixed-price"
  #                     }
  #                 ]
  #             }
  #       400:
  #         $ref: '#/components/responses/standard400'
  #       404:
  #         $ref: '#/components/responses/standard404'
  #       500: 
  #         $ref: '#/components/responses/standard500'

  /drop/{dropId}:
    get:
      tags: 
        - Drop & Marketplace
      summary: Get a single drop.
      parameters:
        - name: dropId
          required: true
          in: path
          description: Returns the drop created in DB.
          schema:
            type: string
            example: 633b07bf7c95ec1bc38d73a9
                  
      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                "success": true,
                "dropData": [{
                    "totalNFTs": 0,
                    "totalNFTsSold": 0,
                    "NFTIds": [
                        "633afcf59ef382fd85ff83d2"
                    ],
                    "isCreatedOnBlockchain": false,
                    "txHash": "",
                    "status": "draft",
                    "_id": "633b07ba7c95ec1bc38d73a8",
                    "userId": "633af8b49ef382fd85ff83d0",
                    "title": "Not so  Fancy Drop",
                    "description": "This drop has the most eww NFTs ever",
                    "image": "SOME URL",
                    "startTime": "2025-11-30T18:21:58.129Z",
                    "endTime": "2025-11-30T18:38:38.129Z",
                    "saleType": "auction",
                    "__v": 0
                  }]
                 }
                
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
      security:
      - adminBearerAuth: []
      - userBearerAuth: []
      
    delete:
      tags:
        - Drop & Marketplace
      summary: Delete a drop.
      parameters:
        - name: dropId
          required: true
          in: path
          description: drop deleted successfully.
          schema:
            type: string
            example: 633b07ba7c95ec1bc38d73a8

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
  
  /drop/nfts/{dropId}/{start}/{end}:
    get:
      tags: 
        - Drop & Marketplace
      summary: Get NFTs with optional filtering and sorting
      parameters:
        - name: dropId
          in: path
          description: The ID of the drop to fetch NFTs from.
          required: true
          schema:
            type: string
        - name: start
          in: path
          description: The start index of the paginated results.
          required: true
          schema:
            type: integer
        - name: end
          in: path
          description: The end index of the paginated results.
          required: true
          schema:
            type: integer
        - name: sortingOrder
          in: query
          description: Sort order for NFTs. Accepted values are 'ascending' or 'descending'.
          required: false
          schema:
            type: string
        - name: minPrice
          in: query
          description: Filter NFTs with prices greater than or equal to the specified value.
          required: false
          schema:
            type: number
        - name: maxPrice
          in: query
          description: Filter NFTs with prices less than or equal to the specified value.
          required: false
          schema:
            type: number
                  
      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": {
                      "nfts": [
                          {
                              "_id": "64c142218f88d9196e902f6e",
                              "minterId": "646a8115c52ab562c7a3407d",
                              "ownerId": "646a8115c52ab562c7a3407d",
                              "collectionId": null,
                              "batchId": "64c141e48f88d9196e902f63",
                              "dropId": "64c1429a8f88d9196e902fa1",
                              "marketplaceId": "646fdc1c66951c9395c0648a",
                              "nftId": "1221166566",
                              "title": "NFT 2",
                              "type": "Rare",
                              "nftFormat": "png",
                              "supplyType": "Single",
                              "mintingType": "batch-mint",
                              "nftURI": "https://ipfs.io/ipfs/QmQ6yaEPsvHxnjdse18XkdpZmGyZBam4PSkiquzQet7iJS",
                              "txHash": "",
                              "isMinted": false,
                              "properties": {
                                  "artistName": "Adrees",
                                  "fanName": "Mohsin"
                              },
                              "rank": 2,
                              "isOnSale": false,
                              "totalSupply": 5,
                              "isBatchCreated": true,
                              "__v": 0,
                              "currentOrderListingId": {
                                  "_id": "64c142e68f88d9196e902fb8",
                                  "supply": 5,
                                  "totalSupplyOnSale": 5,
                                  "supplySold": 0,
                                  "price": "2",
                                  "isSold": false
                              }
                          },
                          {
                              "_id": "64c1422a8f88d9196e902f7b",
                              "minterId": "646a8115c52ab562c7a3407d",
                              "ownerId": "646a8115c52ab562c7a3407d",
                              "collectionId": null,
                              "batchId": "64c141e48f88d9196e902f63",
                              "dropId": "64c1429a8f88d9196e902fa1",
                              "marketplaceId": "646fdc1c66951c9395c0648a",
                              "nftId": "3427160082",
                              "title": "NFT 3",
                              "type": "Rare",
                              "nftFormat": "png",
                              "supplyType": "Single",
                              "mintingType": "batch-mint",
                              "nftURI": "https://ipfs.io/ipfs/QmQ6yaEPsvHxnjdse18XkdpZmGyZBam4PSkiquzQet7iJS",
                              "txHash": "",
                              "isMinted": false,
                              "properties": {
                                  "artistName": "Adrees",
                                  "fanName": "Mohsin"
                              },
                              "rank": 2,
                              "isOnSale": false,
                              "totalSupply": 5,
                              "isBatchCreated": true,
                              "__v": 0,
                              "currentOrderListingId": {
                                  "_id": "64c142f78f88d9196e902fc0",
                                  "supply": 5,
                                  "totalSupplyOnSale": 5,
                                  "supplySold": 0,
                                  "price": "3",
                                  "isSold": false
                              }
                          }
                      ],
                      "companyInfo": {
                          "companyName": "scytalelabs",
                          "username": "puma"
                      }
                  }
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

  /drop/nft/{nftId}:
    get:
      tags: 
        - Drop & Marketplace
      summary: Get a single nft drom a drop.
      parameters:
        - name: nftId
          required: true
          in: path
          description: Returns the nft added in drop.
          schema:
            type: string
            example: 633afcf59ef382fd85ff83d2
                  
      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                "success": true,
                "data": [
                    {
                        "isMinted": false,
                        "_id": "633afcf59ef382fd85ff83d2",
                        "title": "NFT 1",
                        "type": "Rare",
                        "nftURI": "DUMMY IMAGE LINK",
                        "metadataURI": "DUMMY METADATA LINK",
                        "supplyType": "Single",
                        "nftFormat": "png",
                        "tokenSupply": 1,
                        "properties": {
                            "artistName": "Adrees",
                            "fanName": "Mohsin"
                        },
                        "collectionId": "633afb2d9ef382fd85ff83d1",
                        "userId": "633b13f5e89b4f3a86d8a8b7",
                        "__v": 0,
                        "dropId": "633b07ba7c95ec1bc38d73a8"
                    }
                ]
            }
                
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

    delete:
      tags:
        - Drop & Marketplace
      summary: Delete an nft from the array in the drop.
      parameters:
        - name: nftId
          required: true
          in: path
          description: nft deleted successfully.
          schema:
            type: string
            example: 633afcf59ef382fd85ff83d2

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /drop/collection:
    put:
      tags: 
        - Drop & Marketplace
      summary: Add acollection to a drop.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collectionId:
                  type: string
                  example: 63d799d5042a90612d52b988
                dropId:
                  type: string
                  example: 63c659d5042a90612d52a997
                price:
                  type: number
                  example: 100

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: Drop start time and end time updation was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "message": "Collection added to drop successfully!"
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'


  /drop/feature:
    patch:
      tags: 
        - Drop & Marketplace
      summary: Updates isFeatired flag for a drop.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dropId:
                  type: string
                  example: 63186494efc487d0d97b17b9

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "Drop Featured successfully."
                  }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'        

    get:
      tags: 
        - Drop & Marketplace
      summary: Get Featured drop of the admin.
     
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "FeaturedDrop": {
                      "totalNFTs": 0,
                      "totalNFTsSold": 0,
                      "NFTIds": [
                          "633afcf59ef382fd85ff83d2"
                      ],
                      "isCreatedOnBlockchain": false,
                      "txHash": "",
                      "status": "draft",
                      "_id": "633b07ba7c95ec1bc38d73a8",
                      "userId": "633af8b49ef382fd85ff83d0",
                      "title": "Not so  Fancy Drop",
                      "description": "This drop has the most eww NFTs ever",
                      "image": "SOME URL",
                      "startTime": "2025-11-30T18:21:58.129Z",
                      "endTime": "2025-11-30T18:38:38.129Z",
                      "saleType": "auction",
                      "__v": 0
                    }
                  }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'        


  /drop/featured:
    get:
      tags: 
        - Drop & Marketplace
      summary: Get featured drops
      description: |
        Retrieve a list of featured drops based on the provided `saleType`. 
        The list will be paginated from newest to oldest using the `start` and `end` query parameters.

      parameters:
        - in: query
          name: saleType
          required: true
          schema:
            type: string
          description: The sale type to filter the featured assets.

        - in: query
          name: start
          required: true
          schema:
            type: integer
          description: The starting index of the pagination.

        - in: query
          name: end
          required: true
          schema:
            type: integer
          description: The ending index of the pagination.

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        "200":
          description: Successful response with the list of featured assets.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": [
                      {
                          "isTxFailed": false,
                          "_id": "64b66cfb9fce296cba06057a",
                          "userId": "646a8115c52ab562c7a3407d",
                          "marketplaceId": {
                              "_id": "6470a01ac9d6a012f23f754c",
                              "domain": "puma",
                              "companyName": "scytalelabs",
                              "marketplaceImage": "https://mingablockchain.s3.amazonaws.com/Screenshot%20from%202022-05-15%2002-36-11.png"
                          },
                          "title": "SCY",
                          "image": "SOME URL",
                          "description": "Offical drop for laliga",
                          "dropCloneAddress": "",
                          "totalNFTs": 1,
                          "totalNFTsSold": 0,
                          "NFTIds": [
                              "64b66cf49fce296cba060571"
                          ],
                          "isCreatedOnBlockchain": true,
                          "txHash": "",
                          "status": "active",
                          "saleType": "fixed-price",
                          "dropType": "1155",
                          "isFeatured": false,
                          "isFeaturedSuperAdmin": false,
                          "bannerURL": "kajsfbfkjasb",
                          "category": "Mystery Boxes",
                          "createdAt": "2023-07-18T10:44:11.474Z",
                          "updatedAt": "2023-07-18T10:49:21.447Z",
                          "__v": 1
                      },
                      {
                          "isTxFailed": false,
                          "_id": "64b66ca29fce296cba06055f",
                          "userId": "646a8115c52ab562c7a3407d",
                          "marketplaceId": {
                              "_id": "6470a01ac9d6a012f23f754c",
                              "domain": "puma",
                              "companyName": "scytalelabs",
                              "marketplaceImage": "https://mingablockchain.s3.amazonaws.com/Screenshot%20from%202022-05-15%2002-36-11.png"
                          },
                          "title": "SCY",
                          "image": "SOME URL",
                          "description": "Offical drop for laliga",
                          "dropCloneAddress": "",
                          "totalNFTs": 0,
                          "totalNFTsSold": 0,
                          "NFTIds": [],
                          "isCreatedOnBlockchain": false,
                          "txHash": "",
                          "status": "draft",
                          "saleType": "fixed-price",
                          "dropType": "1155",
                          "isFeatured": false,
                          "isFeaturedSuperAdmin": false,
                          "bannerURL": "kajsfbfkjasb",
                          "category": "Mystery Boxes",
                          "createdAt": "2023-07-18T10:42:42.593Z",
                          "updatedAt": "2023-07-18T10:42:42.593Z",
                          "__v": 0
                      }
                  ]
              }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'


# Order listing routes

  /order-listing/collection/sale:
    post:
      tags: 
        - Order Listing
      summary: Put thw whole Collection on sale.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collectionId:
                  type: string
                  example: 633afcf59ef382fd85ff83d2
                price:
                  type: string
                  example: '500'

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                    "marketplaceData": {
                                  "_id":"6388fe93422785d87b955abd",
                                  "collectionId" :"638729549aceae5077b76998",
                                  "price":"100",
                                  "isSold":"false",
                                  "soldAt":"",
                                  "txHash":"",
                                  "bid":"0",
                                  "saleType":"fixed-price",
                                  "__v":0
                                  },
                  "message": 'Collection successfully put on sale',
                  }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /order-listing/collection/buy:
    post:
      tags: 
        - Order Listing
      summary: Buy the whole Collection and NFTs that were put on sale.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collectionId:
                  type: string
                  example: 633afcf59ef382fd85ff83d2

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "collectionNewOwner":638483ccbfe7ee4d0a8de457,
                  "message": 'Collection successfully bought',
                  }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'



  /order-listing/nft/sale:
    post:
      tags: 
        - Order Listing
      summary: Put single NFT on sale.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nftId:
                  type: string
                  example: 633afcf59ef382fd85ff83d2
                price:
                  type: string
                  example: '500'

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                    "marketplaceData": {
                                  "_id":"6388fe93422785d87b955abd",
                                  "collectionId" :"638729549aceae5077b76998",
                                  "nftId":"63879a932bb581f6ee3a148a",
                                  "price":"100",
                                  "isSold":"false",
                                  "soldAt":"",
                                  "txHash":"",
                                  "bid":"0",
                                  "saleType":"fixed-price",
                                  "__v":0
                                  },
                  "message": 'NFT successfully put on sale',
                  }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /order-listing/nft/buy:
    post:
      tags: 
        - Order Listing
      summary: Buy single NFT that was put on sale.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nftId:
                  type: string
                  example: 633afcf59ef382fd85ff83d2
                price:
                  type: string
                  example: '500'

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "nftNewOwner":638483ccbfe7ee4d0a8de457,
                  "message": 'NFT successfully bought',
                  }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /order-listing/my-nfts/{saleType}/{start}/{end}:
    get:
      tags: 
        - Order Listing
      summary: Query the data for your NFTs in marketplace.
      parameters:
        - name: saleType
          required: true
          in: path
          description: Provide the sale type of nfts that are on sale.
          schema:
            type: string
            example: fixed-price
        - name: start
          required: true
          in: path
          description: Starting index of pagination.
          schema:
            type: integer
            example: 0
        - name: end
          required: true
          in: path
          description: Ending index of pagination.
          schema:
            type: integer
            example: 4
                  
      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []      

  /order-listing/nfts/{saleType}/{start}/{end}:
    get:
      tags: 
        - Order Listing
      summary: Query the data for all NFTs on sale.
      parameters:
        - name: saleType
          required: true
          in: path
          description: Provide the sale type of nfts that are on sale.
          schema:
            type: string
            example: auction
        - name: start
          required: true
          in: path
          description: Starting index of pagination.
          schema:
            type: integer
            example: 0
        - name: end
          required: true
          in: path
          description: Ending index of pagination.
          schema:
            type: integer
            example: 4
                  
      responses:
        200:
          $ref: '#/components/responses/standard200'
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
                
      security:
      - adminBearerAuth: []
      - userBearerAuth: []      


# Auction Routes
  /auction/bid:
    post:
      tags: 
        - Auction
      summary: Query the data for drops with a certain status.
     
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nftId: 
                  type: string
                  example: 63186494efc487d0d97b17b9
                bidAmount:
                  type: string
                  example: 3000000000000000000
                expiryTime: 
                  type: string
                  format: 'date-time'
                # bidderAddress:
                #   type: string
                #   example: '0x2EDb32c1B0229B04Dff6c54cF8bB53855b4974f6'
        
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: 
                    success: true,
                    bidId: '63186494efc487d0d97b17c4'
                    message: 'Bid placed successfully!'
                
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
  
  /auction/bid/tx-cost-summary:
    get:
      tags:
        - Auction 
      summary: Get transaction cost estimation for making a bid on an NFT

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": {
                      "transactions": 2,
                      "data": [
                          {
                              "transaction": "payment token approval",
                              "estimatedGas": 46049
                          },
                          {
                              "transaction": "bid on NFT",
                              "estimatedGas": 174607
                          }
                      ]
                  }
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

        
  /auction/bid/accept:
    post:
      tags: 
        - Auction
      summary: Accept a certain bid.
     
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bidId: 
                  type: string
                  example: 63186494efc487d0d97b17b9

              required:
              - bidId
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: 
                    success: true,
                    message: 'Bid successfully accepted'
                
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
  /auction/bid/accept/tx-cost-summary:
    get:
      tags:
        - Auction 
      summary: Get transaction cost estimation for accepting a bid on an NFT

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": {
                      "transactions": 1,
                      "data": {
                          "transaction": "accept bid on NFT",
                          "estimatedGas": 202131
                      }
                  }
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

    
  /auction/{nftId}/{start}/{end}:
    get:
      tags: 
        - Auction
      summary: Query bids against an NFT.
      parameters:
        - name: nftId
          required: true
          in: path
          description: NFT id for which bids are to be queried.
          schema:
            type: string
            example: '63186494efc487d0d97b17b2'
        - name: start
          required: true
          in: path
          description: Starting index of pagination.
          schema:
            type: integer
            example: 2
        - name: end
          required: true
          in: path
          description: Ending index of pagination.
          schema:
            type: integer
            example: 4

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "bids": [
                      {
                          "_id": "634d594ce6b02201bb336f82",
                          "userId": "63458dc14bd05daab34d6c31",
                          "nftId": "63458dd84bd05daab34d6c3a",
                          "bidAmount": "4000000000",
                          "bidTime": "2022-10-17T13:31:56.040Z",
                          "expiryTime": "2025-12-05T01:24:37.728Z",
                          "bidderAddress": "0x3EDb32c1B0229B04Dff6c54cF8bB53855b4974f6",
                          "status": "active",
                          "__v": 0
                      },
                      {
                          "_id": "634d5941e6b02201bb336f7e",
                          "userId": "63458dc14bd05daab34d6c31",
                          "nftId": "63458dd84bd05daab34d6c3a",
                          "bidAmount": "5000000",
                          "bidTime": "2022-10-17T13:31:45.662Z",
                          "expiryTime": "2025-12-05T01:24:37.728Z",
                          "bidderAddress": "0x3EDb32c1B0229B04Dff6c54cF8bB53855b4974f6",
                          "status": "active",
                          "__v": 0
                      }
                  ]
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
  /auction/bid/highest/{nftId}:
    get:
      tags: 
        - Auction
      summary: Query the highest bid against an NFT.
      parameters:
        - name: nftId
          required: true
          in: path
          description: NFT id for which bids are to be queried.
          schema:
            type: string
            example: '63186494efc487d0d97b17b2'
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: 
                  "success": true,
                  "highestBid": {
                      "_id": "634ed06c653823da7ce5b457",
                      "bidAmount": "2",
                      "expiryTime": "2023-10-17T03:24:00.000Z",
                      "status": "active"
                  }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /auction/bids/{nftId}/{start}/{end}:
    get:
      tags: 
        - Auction
      summary: Query all bids against an NFT.
      parameters:
        - name: nftId
          required: true
          in: path
          description: NFT id for which bids are to be queried.
          schema:
            type: string
            example: '63186494efc487d0d97b17b2'
        - name: start
          required: true
          in: path
          description: Starting index of pagination.
          schema:
            type: integer
            example: 0
        - name: end
          required: true
          in: path
          description: Ending index of pagination.
          schema:
            type: integer
            example: 2

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: 
                  "success": true
                  "totalBids": 5
                  "data": [
                      {
                          "txHash": "",
                          "_id": "634ed3546534e3a43e849271",
                          "userId": "63458dc14bd05daab34d6c31",
                          "nftId": "63458dd84bd05daab34d6c3a",
                          "bidAmount": "14",
                          "bidTime": "2022-10-18T16:24:52.799Z",
                          "expiryTime": "2023-10-17T03:24:00.000Z",
                          "bidderAddress": "0x2EDb32c1B0229B04Dff6c54cF8bB53855b4974f6",
                          "status": "active",
                          "isHighestBid": true,
                          "__v": 0
                      },
                      {
                          "txHash": "",
                          "_id": "634ed34b6534e3a43e84926b",
                          "userId": "63458dc14bd05daab34d6c31",
                          "nftId": "63458dd84bd05daab34d6c3a",
                          "bidAmount": "4",
                          "bidTime": "2022-10-18T16:24:43.138Z",
                          "expiryTime": "2023-10-17T03:24:00.000Z",
                          "bidderAddress": "0x2EDb32c1B0229B04Dff6c54cF8bB53855b4974f6",
                          "status": "active",
                          "isHighestBid": false,
                          "__v": 0
                      }
                  ]
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'


  /auction/bid/finalize:
    put:
      tags: 
        - Auction
      summary: Finalize bid.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bidId: 
                  type: string
                  example: 63186494efc487d0d97b17b9
                txHash:
                  type: string
                  example: '0x2592cf699903e83bfd664aa4e339388fd044fe31643a85037be803a5d162729f'
        
      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: 
                  "success": true,
                  "message": "Bid sucessfully finalized"
                
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
          
  /auction/nft/auction:
    post:
      tags: 
        - Auction
      summary: Put single NFT on auction.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nftId:
                  type: string
                  example: 633afcf59ef382fd85ff83d2
                startBid:
                  type: number
                  example: '500'
                startTime:
                  type: string
                  example: 1669968567979
                endTime:
                  type: string
                  example: 1769968567979

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": 'NFT successfully put on auction',
                  }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /auction/nft/bid:
    post:
      tags: 
        - Auction
      summary: Bid on single NFT that was put on auction.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nftId:
                  type: string
                  example: 633afcf59ef382fd85ff83d2
                bidAmount:
                  type: number
                  example: '600'
                expiryTime:
                  type: string
                  example: 1769968567979

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "bidId":'638f07461f0b595fd89e68ad',
                  "message": 'Bid added successfully.',
                  }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /auction/nft/acceptBid:
    post:
      tags: 
        - Auction
      summary: Accept the bid made on nft that was puton Auction.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bidId:
                  type: string
                  example: 638f07461f0b595fd89e68ad
             

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        '200':
          description: successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "nftNewOwner":'638483ccbfe7ee4d0a8de457',
                  "message": 'Bid accepted successfully.',
                  }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
          
#Lazy Mint
  /lazy-mint/NFT:
    post:
      tags: 
      - LazyMint
      summary: Lazy mint a single NFT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: My super NFT
                description:
                  type: string
                  example: This is my special NFT, its very awesome.
                collectionId:
                  type: string
                  example: 63186494efc487d0d97b17b6
                nftURI:
                  type: string
                  example: https://ipfs.io/ipfs/QmS8FdrxYsQ7fTDg4fmiFbTfLixb6rjACdSgxSptVDRCRs
                previewImageURI:
                  type: string
                  example: https://ipfs.io/ipfs/QmS8FdrxYsQ7fTDg4fmiFbTfLixb6rjACdSgxSptVDRCRd
                  description: This field becomes a required one if the NFT is a video, 3d image or audio.
                metadataURI:
                  type: string
                  example: https://ipfs.io/ipfs/QmS8FdrxYsQ7fTDg4fmiFbTfLixb6rjACdSgxSptVDRCRq
                nftFormat:
                  type: string
                  example: png
                'type':
                  type: string
                  enum:
                  - Mastercraft     
                  - Common
                  - Rare
                  - Epic
                  - Legendary
                  - Uncommon
                  example: Epic
                properties:
                  type: object
                  example:
                    {
                      "Artist": "Van Gough",
                      "Location": "France"
                    }
                  description: This field can have an number of key value pairs, including zero

              required:
              - title
              - nftURI
              - metadataURI
              - collectionId
              - nftFormat

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "nftId": "66310684386703594143364704760159545973019510424713539276086331151695358298214",
                  "nftObjectId": "636539a31b8ef8dc73decef1",
                  "message": "NFT added successfully"
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /lazy-mint/voucher:
    patch:
      tags: 
      - LazyMint
      summary: Add signature of voucher signed by user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nftId:
                  type: string
                  example: 63186494efc487d0d97b17b6
                signature: 
                  type: string
                  example: '0x3bc843a917d6c19c487c1d0c660cdd61389ce2a7651ee3171bcc212ffddca164193f1f2e06f7ed8f9fbf2254232d99848a8102b552032b68a5507b4d81492f0f1b'

      security:
      - adminBearerAuth: []
      - userBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "voucher sinature added successfully"
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
    
#NFT Properties
  # /nft-properties/:
  #   post:
  #     tags: 
  #     - NFT-Properties
  #     summary: Add a template for the NFT properties
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #                 example: Cars
  #               isDefalut:
  #                 type: boolean
  #                 example: true
  #               data:
  #                 type: array
  #                 items:
  #                   type: object
  #                   properties:
  #                     key:
  #                       type: string
  #                       example: Company
  #                     type:
  #                       type: string
  #                       example: String

  #     security:
  #     - superAdminBearerAuth: []

  #     responses:
  #       200:
  #         description: Query was successful.
  #         content:
  #           application/json:
  #             schema:
  #               type: string
  #               example: {
  #                 "success": true,
  #                 "message": "Template created successfully."
  #               }
  #       400:
  #         $ref: '#/components/responses/standard400'
  #       404:
  #         $ref: '#/components/responses/standard404'
  #       500: 
  #         $ref: '#/components/responses/standard500'
          
  #   get:
  #     tags: 
  #     - NFT-Properties
  #     summary: Get all the templates in the database
    
  #     security:
  #     - adminBearerAuth: []

  #     responses:
  #       200:
  #         description: Query was successful.
  #         content:
  #           application/json:
  #             schema:
  #               type: string
  #               example: {
  #                 "success": true,
  #                 "templates": [
  #       {
  #           "_id": "63c659b1042a90612d52a98b",
  #           "userId": "63c4f1af64a0e852164fde5d",
  #           "name": "Cars",
  #           "properties": [
  #               {
  #                   "key": "Company Name",
  #                   "type": "String",
  #                   "_id": "63c659b1042a90612d52a98c"
  #               },
  #               {
  #                   "key": "Car Name",
  #                   "type": "String",
  #                   "_id": "63c659b1042a90612d52a98d"
  #               },
  #               {
  #                   "key": "Model",
  #                   "type": "String",
  #                   "_id": "63c659b1042a90612d52a98e"
  #               },
  #               {
  #                   "key": "isBrandNew",
  #                   "type": "Boolean",
  #                   "_id": "63c659b1042a90612d52a98f"
  #               }
  #           ],
  #           "__v": 0
  #       },
  #       {
  #           "_id": "63c659d5042a90612d52a997",
  #           "userId": "63c4f1af64a0e852164fde5d",
  #           "name": "Bikes",
  #           "properties": [
  #               {
  #                   "key": "Company Name",
  #                   "type": "String",
  #                   "_id": "63c659d5042a90612d52a998"
  #               },
  #               {
  #                   "key": "Car Name",
  #                   "type": "String",
  #                   "_id": "63c659d5042a90612d52a999"
  #               },
  #               {
  #                   "key": "Model",
  #                   "type": "String",
  #                   "_id": "63c659d5042a90612d52a99a"
  #               },
  #               {
  #                   "key": "isBrandNew",
  #                   "type": "Boolean",
  #                   "_id": "63c659d5042a90612d52a99b"
  #               }
  #           ],
  #           "__v": 0
  #       },
  #       {
  #           "_id": "63d769ce91b3d6d5d66dbcf3",
  #           "userId": "63c4f1af64a0e852164fde5d",
  #           "name": "Air Craft",
  #           "properties": [
  #               {
  #                   "key": "Type",
  #                   "type": "String",
  #                   "_id": "63d769ce91b3d6d5d66dbcf4"
  #               },
  #               {
  #                   "key": "fuel_capacity",
  #                   "type": "String",
  #                   "_id": "63d769ce91b3d6d5d66dbcf5"
  #               }
  #           ],
  #           "__v": 0
  #       }
  #   ]
  #               }
  #       400:
  #         $ref: '#/components/responses/standard400'
  #       404:
  #         $ref: '#/components/responses/standard404'
  #       500: 
  #         $ref: '#/components/responses/standard500'
          
  # /nft-properties/{start}/{end}:
  #   get:
  #     tags: 
  #     - NFT-Properties
  #     summary: Get templates of the user
  #     parameters:
  #         - name: start
  #           required: true
  #           in: path
  #           description: Provide starting index to get start getting data from.
  #           schema:
  #             type: string
  #             example: 0
  #         - name: end
  #           required: true
  #           in: path
  #           description: Provide ending index till which to get data.
  #           schema:
  #             type: string
  #             example: 5

  #     security:
  #     - adminBearerAuth: []

  #     responses:
  #       200:
  #         description: Query was successful.
  #         content:
  #           application/json:
  #             schema:
  #               type: string
  #               example: {
  #                 "success": true,
  #                 "templates": [
  #       {
  #           "_id": "63c659b1042a90612d52a98b",
  #           "userId": "63c4f1af64a0e852164fde5d",
  #           "name": "Cars",
  #           "isDefault": true,
  #           "userType": "admin",
  #           "properties": [
  #               {
  #                   "key": "Company Name",
  #                   "type": "String",
  #                   "_id": "63c659b1042a90612d52a98c"
  #               },
  #               {
  #                   "key": "Car Name",
  #                   "type": "String",
  #                   "_id": "63c659b1042a90612d52a98d"
  #               },
  #               {
  #                   "key": "Model",
  #                   "type": "String",
  #                   "_id": "63c659b1042a90612d52a98e"
  #               },
  #               {
  #                   "key": "isBrandNew",
  #                   "type": "Boolean",
  #                   "_id": "63c659b1042a90612d52a98f"
  #               }
  #           ],
  #           "__v": 0
  #       },
  #       {
  #           "_id": "63c659d5042a90612d52a997",
  #           "userId": "63c4f1af64a0e852164fde5d",
  #           "name": "Bikes",
  #           "isDefault": false,
  #           "userType": "admin",
  #           "properties": [
  #               {
  #                   "key": "Company Name",
  #                   "type": "String",
  #                   "_id": "63c659d5042a90612d52a998"
  #               },
  #               {
  #                   "key": "Car Name",
  #                   "type": "String",
  #                   "_id": "63c659d5042a90612d52a999"
  #               },
  #               {
  #                   "key": "Model",
  #                   "type": "String",
  #                   "_id": "63c659d5042a90612d52a99a"
  #               },
  #               {
  #                   "key": "isBrandNew",
  #                   "type": "Boolean",
  #                   "_id": "63c659d5042a90612d52a99b"
  #               }
  #           ],
  #           "__v": 0
  #       },
  #       {
  #           "_id": "63d769ce91b3d6d5d66dbcf3",
  #           "userId": "63c4f1af64a0e852164fde5d",
  #           "name": "Air Craft",
  #           "isDefault": false,
  #           "userType": "admin",
  #           "properties": [
  #               {
  #                   "key": "Type",
  #                   "type": "String",
  #                   "_id": "63d769ce91b3d6d5d66dbcf4"
  #               },
  #               {
  #                   "key": "fuel_capacity",
  #                   "type": "String",
  #                   "_id": "63d769ce91b3d6d5d66dbcf5"
  #               }
  #           ],
  #           "__v": 0
  #       }
  #   ]
  #               }
  #       400:
  #         $ref: '#/components/responses/standard400'
  #       404:
  #         $ref: '#/components/responses/standard404'
  #       500: 
  #         $ref: '#/components/responses/standard500'

  /nft-properties/admin/template:
    post:
      tags: 
      - NFT-Properties
      summary: Add a template for the NFT properties
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Bikes
                isDefalut:
                  type: boolean
                  example: true
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        example: Is New
                      type:
                        type: string
                        example: Boolean

      security:
      - adminBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "Template created successfully."
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
    # 
  /nft-properties/admin/default:          
    get:
      tags: 
      - NFT-Properties
      summary: Get defalut templates of the user
    
      security:
      - adminBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "defaultTemplate": [
        {
            "_id": "63c659b1042a90612d52a98b",
            "userId": "63c4f1af64a0e852164fde5d",
            "name": "Cars",
            "isDefault": true,
            "userType": "admin",
            "properties": [
                {
                    "key": "Company Name",
                    "type": "String",
                    "_id": "63c659b1042a90612d52a98c"
                },
                {
                    "key": "Car Name",
                    "type": "String",
                    "_id": "63c659b1042a90612d52a98d"
                },
                {
                    "key": "Model",
                    "type": "String",
                    "_id": "63c659b1042a90612d52a98e"
                },
                {
                    "key": "isBrandNew",
                    "type": "Boolean",
                    "_id": "63c659b1042a90612d52a98f"
                }
            ],
            "__v": 0
        },
         {
            "_id": "63d769ce91b3d6d5d66dbcf3",
            "userId": "63c4f1af64a0e852164fde5d",
            "name": "Air Craft",
            "isDefault": false,
            "userType": "admin",
            "properties": [
                {
                    "key": "Type",
                    "type": "String",
                    "_id": "63d769ce91b3d6d5d66dbcf4"
                },
                {
                    "key": "fuel_capacity",
                    "type": "String",
                    "_id": "63d769ce91b3d6d5d66dbcf5"
                }
            ],
            "__v": 0
        }
    ]
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
  /nft-properties/{userType}:          
    get:
      tags: 
      - NFT-Properties
      summary: Get templates by user type
      parameters:
        - name: userType
          required: true
          in: path
          description: Provide the user type either admin or super-admin.
          schema:
            type: string
            example: admin
      security:
      - adminBearerAuth: []
      
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "defaultTemplate": [
        {
            "_id": "63c659b1042a90612d52a98b",
            "userId": "63c4f1af64a0e852164fde5d",
            "name": "Cars",
            "isDefault": true,
            "userType": "admin",
            "properties": [
                {
                    "key": "Company Name",
                    "type": "String",
                    "_id": "63c659b1042a90612d52a98c"
                },
                {
                    "key": "Car Name",
                    "type": "String",
                    "_id": "63c659b1042a90612d52a98d"
                },
                {
                    "key": "Model",
                    "type": "String",
                    "_id": "63c659b1042a90612d52a98e"
                },
                {
                    "key": "isBrandNew",
                    "type": "Boolean",
                    "_id": "63c659b1042a90612d52a98f"
                }
            ],
            "__v": 0
        },
    ]
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /nft-properties/template/is-available/{templateName}:
    get:
      tags: 
      - NFT-Properties
      summary: Check the availablity of a template
      parameters:
        - name: templateName
          required: true
          in: path
          description: Provide template name to check.
          schema:
              type: string
              example: ape-monkeys

      security:
      - adminBearerAuth: []
      - superAdminBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  success: true, 
                  isAvailable: false,
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'

# #Notifications
  /notifications/hide:
    patch:
      tags: 
      - Notifications
      summary: Hide the notification i:e read it.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationIds:
                  type: string
                  example: [ '63bbeaa9ae83d5a40469658e', '63bbeaa9ae83d5a40469658a' ]
                
      security:
      - adminBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "Notification status updated successfully."
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
          
  /notifications/:
    get:
      tags: 
      - Notifications

      summary: Get notifications within a specified range
      parameters:
        - name: isRead
          in: query
          description: Notification retrival mode
          schema:
            type: boolean
        - name: start
          in: query
          description: Start index for pagination
          schema:
            type: integer
        - name: end
          in: query
          description: End index for pagination
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data: [
                  {
                    "_id": "63bd0e1a2e5aad04d4ea3a2f",
                    "userId": "63b2b04c8dd49962c845c282",
                    "message": "Bid on Single NFT accepted by the owner.",
                    "isRead": true,
                    "createdAt": "2023-01-10T07:04:20.029Z",
                    "updatedAt": "2023-01-10T07:04:20.029Z",
                    "__v": 0
                  },
                  {
                    "_id": "63c512cc2a9a7c4d43a3b64e",
                    "userId": "63b2b04c8dd49962c845c282",
                    "message": "Bid on Single NFT accepted by the owner.",
                    "isRead": true,
                    "createdAt": "2023-01-16T09:03:08.190Z",
                    "updatedAt": "2023-01-16T09:03:08.190Z",
                    "__v": 0
                  },
                  {
                    "_id": "63c7a55b83a0dddac77124db",
                    "userId": "63b2b04c8dd49962c845c282",
                    "message": "Bid on Single NFT accepted by the owner.",
                    "isRead": true,
                    "createdAt": "2023-01-18T07:52:59.785Z",
                    "updatedAt": "2023-01-18T07:52:59.785Z",
                    "__v": 0
                  }
                ]
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'  

#Upload to S3 route
  /upload/image:
    post:
      tags: 
      - Upload to S3
      summary: Upload Files onto the S# bucket.
      requestBody:
        required: true
        content:
           multipart/form-data::
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                
      security:
      - adminBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "File uploaded successfully",
                  "url": "'https://scytalelabs.mypinata.cloud/ipfs/LmVTKRH5oJ6DfhNBSSFfgMxbG8KEy1Cy9ebXtzPwGMnPZa/pearl.png"
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'  
          
  /transactions/:
    get:
      tags: 
        - Blockchain Transactions
      summary: Returns all transaction details
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "transactions": [
                            {
                                "_id": "6423d91305d462bea3744956",
                                "userId": "6423d78c11cbce7fd6786959",
                                "txHash": "0x2446f1fd773fbb9f080e674b60c6a033c7ed7427b8b9413cf28a2a4a6da9b56c",
                                "txReciept": "0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238",
                                "txFeeInUsd": 12313,
                                "txFeeInWei": "12313",
                                "to": "0x418d2223dF6f28Db91608358a2bD4204A44C2E6d",
                                "createdAt": "2023-03-29T06:22:11.733Z",
                                "updatedAt": "2023-03-29T06:22:11.733Z",
                                "__v": 0
                            },],
                }
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /transactions/count:
    get:
      tags: 
        - Blockchain Transactions
      summary: Returns number of transaction
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "transactionCount": 23
                }
        500: 
          $ref: '#/components/responses/standard500'

  /transactions/by-value:
    get:
      tags: 
        - Blockchain Transactions
      summary: Returns all transaction details in a price range.
      parameters:
        - name: high
          required: true
          in: query
          description: Provide the upper bound.
          schema:
            type: integer
            example: 2
        - name: low
          required: true
          in: query
          description: Provide the lower bound.
          schema:
            type: integer
            example: 2

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "transactions": [
                            {
                                "_id": "6423d91305d462bea3744956",
                                "userId": "6423d78c11cbce7fd6786959",
                                "txHash": "0x2446f1fd773fbb9f080e674b60c6a033c7ed7427b8b9413cf28a2a4a6da9b56c",
                                "receipt": "0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238",
                                "txFeeInUsd": 12313,
                                "txFeeInWei": "12313",
                                "to": "0x418d2223dF6f28Db91608358a2bD4204A44C2E6d",
                                "createdAt": "2023-03-29T06:22:11.733Z",
                                "updatedAt": "2023-03-29T06:22:11.733Z",
                                "__v": 0
                            },],
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
          
#Upload to IPFS route
  /upload-ipfs/image:
    post:
      tags: 
      - Upload to IPFS
      summary: Upload files onto the ipfs.
      requestBody:
        required: true
        content:
           multipart/form-data::
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                
      security:
      - adminBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "message": "File uploaded successfully",
                  "IpfsData": {
                    "IpfsHash": "QmSkXQ1jDyxFZKWmKp63GXVv3d8TQYL4yz9Akp6wmuaHzB",
                    "PinSize": 246601,
                    "Timestamp": "2023-03-30T07:19:43.748Z",
                    "isDuplicate": true,
                    }
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /transactions/by-date/{startDate}/{endDate}:
    get:
      tags: 
        - Blockchain Transactions
      summary: Returns all transaction details in a time range.
      parameters:
        - name: startDate
          required: true
          in: path
          description: Provide the lower bound.
          schema:
            type: string
            example: "2023-03-28"
        - name: endDate
          required: true
          in: path
          description: Provide the upper bound.
          schema:
            type: string
            example: "2023-03-29"
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "transactions": [
                            {
                                "_id": "6423d91305d462bea3744956",
                                "userId": "6423d78c11cbce7fd6786959",
                                "txHash": "0x2446f1fd773fbb9f080e674b60c6a033c7ed7427b8b9413cf28a2a4a6da9b56c",
                                "txReciept": "0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238",
                                "txFeeInUsd": 12313,
                                "txFeeInWei": "12313",
                                "to": "0x418d2223dF6f28Db91608358a2bD4204A44C2E6d",
                                "createdAt": "2023-03-29T06:22:11.733Z",
                                "updatedAt": "2023-03-29T06:22:11.733Z",
                                "__v": 0
                            },]
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
  /top-up/user/history:
    get:
      tags: 
        - Top Up
      summary: Returns top up history for a user.
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: [{
                    "success": true,
                    "amountInUSD": 121,
                    "amountInMatic": "122",
                    "date": "2023-05-11T15:55:08.418+00:00",
                }]
        500: 
          $ref: '#/components/responses/standard500'
  /top-up/admin/history:
    get:
      tags: 
        - Top Up
      summary: Returns top up history for all users.
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: [{
                    "success": true,
                    "amountInUSD": 121,
                    "amountInMatic": "122",
                    "date": "2023-05-11T15:55:08.418+00:00",
                }]
        500: 
          $ref: '#/components/responses/standard500'

#Wallet Analytics Routes

  /wallet-analytics/funds/:
    get:
      tags: 
        - Wallet Analytics
      summary: Returns matic balance.
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "maticBalance": 1.5138990253708824,
                    "balanceInUsd": 1.3154268631447597
                }
        500: 
          $ref: '#/components/responses/standard500'

  /wallet-analytics/toggle-email-notifications/:
    get:
      tags: 
        - Wallet Analytics
      summary: Toggles email notifications.
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "message": 'Email notification disabled'
                }
        500: 
          $ref: '#/components/responses/standard500'
          
# User Balance Routes
  /user/balances:
    get:
      tags: 
        - User Balance
      summary: Returns polygin api and wallet balance.
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "polygonBalances": {
                        "InWei": "0",
                        "InMatic": "0",
                        "InUsd": 0
                    },
                    "walletBalance": {
                        "InWei": "179062152358145593",
                        "InMatic": 0.1790621523581456,
                        "InUsd": 0.12480632019362747
                    }
                }
        500: 
          $ref: '#/components/responses/standard500'
          


#Earnings route
  /earnings/:
    get:
      tags: 
      - Earnings
      summary: user can get the earnings of him/her.
                
      security:
      - userBearerAuth: []
      - adminBearerAuth: []
      - superAdminBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "earnings": {
                    "_id": '64352f86de4eddc7263ec513',
                    "userId": '64352f86de4eddc7263ec50d',
                    "currentBalance": 30,
                    "totalEarnings": 135,
                    "type": "nft-sold",
                    "createdAt": '2023-04-11T09:59:34.167Z',
                    "updatedAt": '2023-04-11T09:59:34.167Z',
                    "__v": 0
                  }
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /earnings/super-admin:
    get:
      tags: 
        - Earnings
      summary: Returns platform fee earned by superadmin

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "earnings": 12.3
                }
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []

  /earnings/admin:
    get:
      tags: 
        - Earnings
      summary: Returns platform fee earned by current admin

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "royaltyEarnings": 0.02,
                  "nftEarnings": 1.88,
                  "totalEarnings": 1.9
              }
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []

  /earnings/{userId}:
    get:
      tags: 
      - Earnings
      summary: Super admin can get the earnings of other users and admins.
      parameters:
        - name: userId
          required: true
          in: path
          description: Provide the user ID.
          schema:
            type: string
            example: "64352f86de4eddc7263ec50d"
                
      security:
      - superAdminBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "earnings": {
                    "_id": '64352f86de4eddc7263ec513',
                    "userId": '64352f86de4eddc7263ec50d',
                    "currentBalance": 30,
                    "totalEarnings": 135,
                    "type": "royalty-fee",
                    "createdAt": '2023-04-11T09:59:34.167Z',
                    "updatedAt": '2023-04-11T09:59:34.167Z',
                    "__v": 0
                  }
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /earnings/list:
    get:
      tags: 
        - Earnings
      summary: Returns amount and date of creation of every earning

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "earnings":[{
                    "_id":"64943788fb3c577951883694",
                    "amount":200,
                    "createdAt":"2023-06-22T11:59:04.103Z"
                    
                  },{
                    "_id":"64943788fb3c577951883696",
                    "amount":50,
                    "createdAt":"2023-06-22T11:59:04.110Z"
                    
                  }]
              }
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - adminBearerAuth: []
      - superAdminBearerAuth: []

#Trade History route
  /history/trade/{nftId}:
    get:
      tags: 
      - Trade History
      summary: user can get the history of a nft.
      parameters:
        - name: nftId
          required: true
          in: path
          description: Provide the nftId.
          schema:
            type: string
            example: "643f9ea1aa8666b24bac026a"
      security:
      - userBearerAuth: []
      - adminBearerAuth: []
      - superAdminBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                 {
                   "success":true,
                   "history":[{
                     "_id":"6465cccd8d33c26c7e774821",
                     "nftId":"6465cccd8d33c26c7e774819",
                     "sellerId":{
                       "_id":"6465cccd8d33c26c7e77481a",
                       "walletAddress":"0xFa66506c0f3D6652e5f3312AA20C7c550A4c7c3E"
                     },
                     "buyerId":{
                       "_id":"6465cccd8d33c26c7e77481d",
                       "walletAddress":"0xB60E0c6fb16761687e19b8A77C7A5Ca7E64c4258"
                     },
                     "soldAt":"2023-05-18T06:59:25.887Z",
                     "saleType":"fixed-price",
                     "unitPrice":300,
                     "__v":0
                   },{
                     "_id":"6465cccd8d33c26c7e774823",
                     "nftId":"6465cccd8d33c26c7e774819",
                     "sellerId":{
                       "_id":"6465cccd8d33c26c7e77481d",
                       "walletAddress":"0xB60E0c6fb16761687e19b8A77C7A5Ca7E64c4258"
                     },
                     "buyerId":{
                       "_id":"6465cccd8d33c26c7e77481f"
                     },
                     "soldAt":"2023-05-18T06:59:25.897Z",
                     "saleType":"auction",
                     "unitPrice":400,
                     "__v":0
                   }]}
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'


#Analytics route
  /analytics/:
    post:
      tags: 
        - Analytics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nftId:
                  type: string
                  example: "643f9ea1aa8666b24bac026a"
                dropId:
                  type: string
                  example: "6440f0ca12b188efe169ec91"
                viewerId:
                  type: string
                  example: "643f9ea1aa8666b24bac0273"
                viewedAt:
                  type: string
                  example: "2023-04-20T07:59:06.523Z"
                viewDuration:
                  type: string
                  example: "5 minutes"
                timesSold:
                  type: number
                  example: "6"
                soldAt:
                  type: number
                  example: "35"
                saleDuration:
                  type: number
                  example: "25 minutes"
              required:
              - viewerId
              - viewedAt
              - viewDuration
              - timesSold
              - soldAt
              - saleDuration
                     
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "message": "Analytics created successfully.",
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []
      - adminBearerAuth: []

  /analytics/nft/{nftId}:
    get:
      tags: 
      - Analytics
      summary: user can get the analytics of a nft.
      parameters:
        - name: nftId
          required: true
          in: path
          description: Provide the nftId.
          schema:
            type: string
            example: "6440f0ca12b188efe169ec91"
      security:
      - userBearerAuth: []
      - adminBearerAuth: []
      - superAdminBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: 
                 {
                   "success":true,
                   "analytics":[{
                     "_id":"6440f0ca12b188efe169eca1",
                     "nftId":"6440f0ca12b188efe169ec91",
                     "viewerId":"6440f0c912b188efe169ec89",
                     "viewedAt":"2023-04-20T07:59:06.523Z",
                     "viewDuration":"5 minutes",
                     "timesSold":1,
                     "soldAt":25,
                     "saleDuration":"25 minutes",
                     "createdAt":"2023-04-20T07:59:06.545Z",
                     "updatedAt":"2023-04-20T07:59:06.545Z",
                     "__v":0
                   },{
                     "_id":"6440f0ca12b188efe169eca4",
                     "nftId":"6440f0ca12b188efe169ec91",
                     "viewerId":"6440f0c912b188efe169ec89",
                     "viewedAt":"2023-04-20T07:59:06.550Z",
                     "viewDuration":"5 minutes",
                     "timesSold":2,
                     "soldAt":30,
                     "saleDuration":"7 minutes",
                     "createdAt":"2023-04-20T07:59:06.556Z",
                     "updatedAt":"2023-04-20T07:59:06.556Z",
                     "__v":0
                   }]
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

  /analytics/drop/{dropId}:
    get:
      tags: 
      - Analytics
      summary: user can get the analytics of a drop.
      parameters:
        - name: dropId
          required: true
          in: path
          description: Provide the dropId.
          schema:
            type: string
            example: "6440f0ca12b188efe169ec91"
      security:
      - userBearerAuth: []
      - adminBearerAuth: []
      - superAdminBearerAuth: []

      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: 
                 {
                   "success":true,
                   "analytics":[{
                     "_id":"6440f0ca12b188efe169eca1",
                     "dropId":"6440f0ca12b188efe169ec91",
                     "viewerId":"6440f0c912b188efe169ec89",
                     "viewedAt":"2023-04-20T07:59:06.523Z",
                     "viewDuration":"5 minutes",
                     "timesSold":1,
                     "soldAt":25,
                     "saleDuration":"25 minutes",
                     "createdAt":"2023-04-20T07:59:06.545Z",
                     "updatedAt":"2023-04-20T07:59:06.545Z",
                     "__v":0
                   }]
                }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'
          
          
#Category route
  /category/:
    post:
      tags: 
        - Category
      summary: Create new categories in the database.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  example: "Avatars"
                image:
                  type: string
                  format: binary
                     
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "message": "Category added successfully.",
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []

    get:
      tags: 
        - Category
      summary: Retrive al categorries.
     

      security:
      - superAdminBearerAuth: []

      responses:
        '200':
          description: everything was okay.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success":true,
                  "categories":[{
                    "_id":"6490296b41837c1f50ebd064",
                    "name":"Meta Racers",
                    "imageUrl":"https://mingablockchain.s3.amazonaws.com/stub1.txt",
                    "createdAt":"2023-06-19T10:09:47.921Z",
                    "updatedAt":"2023-06-19T10:09:50.403Z",
                    "__v":0
                    
                  },{
                    "_id":"6490296d41837c1f50ebd067",
                    "name":"Land Plots",
                    "imageUrl":"https://mingablockchain.s3.amazonaws.com/stub2.txt",
                    "createdAt":"2023-06-19T10:09:49.136Z",
                    "updatedAt":"2023-06-19T10:09:49.136Z",
                    "__v":0
                    
                  }]}
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'


  /category/{categoryId}:
    put:
      tags: 
        - Category
      summary: Update existing categories name or image.
      parameters:
        - name: categoryId
          required: true
          in: path
          description: Provide category id to find and edit.
          schema:
            type: string
            example: "6490296b41837c1f50ebd064"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  example: "Meta Racers"
                image:
                  type: string
                  format: binary
                     
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "message": "Category updated successfully.",
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []

  /category/is-available:
    get:
      tags: 
        - Category
      summary: Check if the category alredy exists or not.
      parameters:
        - name: categoryName
          required: true
          in: query
          description: Provide category name to check the existance.
          schema:
            type: string
            example: "Land Plots"
                     
      responses:
        200:
          description: Query was successful.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "isAvailable": true,
                    "message": "Category does not exists."
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'
          
      security:
      - superAdminBearerAuth: []


#Marketplace routes
  /marketplace:
    get:
      tags: 
        - Marketplaces
      summary: Retrive registered marketplaces
      parameters:
        - in: query
          name: start
          description: The starting index of the result set.
          schema:
            type: integer
        - in: query
          name: end
          description: The ending index of the result set.
          schema:
            type: integer

      responses:
        '200':
          description: everything was okay.
          content:
            application/json:
              schema:
                type: string
                example: {
                    "success": true,
                    "data": [
                        {
                          "_id": "646fdc1c66951c9395c0648a",
                          "domain": "nike",
                          "companyName": "scytalelabs",
                          "marketplaceImage": "https://mingablockchain.s3.amazonaws.com/1.png"
                        },
                       {
                          "_id": "646fdc1c66951c9395c0648b",
                          "domain": "adidas",
                          "companyName": "scytalelabs",
                          "marketplaceImage": "https://mingablockchain.s3.amazonaws.com/2.png"
                        }
                    ]
                }
        400:
          $ref: '#/components/responses/standard400'
        500: 
          $ref: '#/components/responses/standard500'

  /marketplace/{marketplaceId}:
    get:
      tags: 
        - Marketplaces
      summary: Retrive registered marketplaces
      parameters:
        - in: path
          name: marketplaceId
          description: marketplace id
          required: true
          schema:
            type: string

      responses:
        '200':
          description: everything was okay.
          content:
            application/json:
              schema:
                type: string
                example: {
                  "success": true,
                  "data": {
                      "_id": "6470a01ac9d6a012f23f754c",
                      "adminId": "646a9a5237041390d79460e1",
                      "domain": "puma",
                      "companyName": "scytalelabs",
                      "industryType": "Tech",
                      "isFeatured": false,
                      "marketplaceImage": "https://mingablockchain.s3.amazonaws.com/Screenshot%20from%202022-05-15%2002-36-11.png",
                      "__v": 0
                  }
              }
        400:
          $ref: '#/components/responses/standard400'
        404:
          $ref: '#/components/responses/standard404'
        500: 
          $ref: '#/components/responses/standard500'

          
components:
  securitySchemes:
    adminBearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT
    userBearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT
    superAdminBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    

  responses:
    standard200:
      description: The request succeeded. Check response for more details.
    standard400:
      description: A parameter is missing. Check response for more details. You can also check request body schema for more information.
    standard404:
      description: Requested resource doesn't exists. Check response for more details.
    standard500:
      description: Internal Server Error. The server encountered something unexpected that prevented it from fulfilling the request.
  